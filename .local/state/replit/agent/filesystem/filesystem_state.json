{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nQurious is a gamified quiz platform built for the Indian market, designed to serve working professionals, students, and teachers. The application combines real-time multiplayer quiz functionality with AI-powered question generation, supporting multiple languages and offering flexible scoring modes. The platform emphasizes engagement through game mechanics while providing professional analytics and insights.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe frontend is built with React and TypeScript using a component-based architecture. The application uses Vite for development and bundling, with the following key design decisions:\n\n- **UI Framework**: Utilizes Radix UI primitives with shadcn/ui components for consistent, accessible design\n- **Styling**: TailwindCSS with CSS variables for dual theme support (playful/minimal themes)\n- **State Management**: React Query for server state management and React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n- **Real-time Communication**: Custom WebSocket client for live quiz interactions\n\nThe application supports Progressive Web App (PWA) features for mobile-first usage and includes internationalization support for English and Hindi languages.\n\n## Backend Architecture\n\nThe backend follows a REST API design with WebSocket support for real-time features:\n\n- **Server Framework**: Express.js with TypeScript\n- **Database Layer**: Drizzle ORM with PostgreSQL, using connection pooling via Neon Database\n- **Real-time Engine**: WebSocket server for live quiz sessions and participant interactions\n- **AI Integration**: OpenAI GPT-5 integration for automated quiz generation from various content sources\n- **Session Management**: In-memory storage with plans for database persistence\n\nThe server implements middleware for request logging, error handling, and CORS management.\n\n## Data Storage Solutions\n\n- **Primary Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Design**: \n  - Users table with role-based access (professional/student/teacher)\n  - Quizzes with JSONB for flexible question storage\n  - Sessions for live quiz management with participant tracking\n  - Responses for answer collection and analytics\n  - Question bank for reusable content management\n\n## Authentication and Authorization\n\nCurrently implements a simplified authentication system:\n- Email-based login/registration\n- User roles (professional, student, teacher) for feature access control\n- Session-based authentication with localStorage for client state\n- Plans for OAuth integration and secure session management\n\n## External Dependencies\n\n- **Database**: Neon Database (PostgreSQL-compatible serverless database)\n- **AI Services**: OpenAI API for quiz generation from documents, URLs, and text content\n- **UI Components**: Radix UI for accessible component primitives\n- **Development Tools**: \n  - Replit-specific development plugins and runtime error handling\n  - Cartographer for enhanced development experience\n- **Real-time Communication**: Native WebSocket implementation\n- **Styling**: TailwindCSS with PostCSS for processing\n- **Build Tools**: Vite for frontend bundling, esbuild for server compilation\n\nThe architecture prioritizes scalability for the Indian market with mobile-first design, low-bandwidth optimization, and multi-language support.","size_bytes":3455},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n// Increase request body size limits to handle file uploads (50MB limit)\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2171},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { webSocketManager } from \"./services/websocket\";\nimport { aiQuizGenerator } from \"./services/ai-quiz-generator\";\nimport { insertUserSchema, insertQuizSchema, insertSessionSchema } from \"@shared/schema\";\nimport { randomBytes } from \"crypto\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // Initialize WebSocket server\n  webSocketManager.init(httpServer);\n\n  // User routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(409).json({ message: \"User already exists\" });\n      }\n      \n      const user = await storage.createUser(userData);\n      res.json({ user });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ user });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.get(\"/api/user/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ user });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  app.patch(\"/api/user/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const user = await storage.updateUser(req.params.id, updates);\n      res.json({ user });\n    } catch (error) {\n      console.error(\"Update user error:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Quiz routes\n  app.get(\"/api/quizzes\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      if (!userId) {\n        return res.status(400).json({ message: \"User ID required\" });\n      }\n      \n      const quizzes = await storage.getQuizzesByUser(userId as string);\n      res.json({ quizzes });\n    } catch (error) {\n      console.error(\"Get quizzes error:\", error);\n      res.status(500).json({ message: \"Failed to get quizzes\" });\n    }\n  });\n\n  app.get(\"/api/quiz/:id\", async (req, res) => {\n    try {\n      const quiz = await storage.getQuiz(req.params.id);\n      if (!quiz) {\n        return res.status(404).json({ message: \"Quiz not found\" });\n      }\n      res.json({ quiz });\n    } catch (error) {\n      console.error(\"Get quiz error:\", error);\n      res.status(500).json({ message: \"Failed to get quiz\" });\n    }\n  });\n\n  app.post(\"/api/quiz\", async (req, res) => {\n    try {\n      const quizData = insertQuizSchema.parse(req.body);\n      const quiz = await storage.createQuiz(quizData);\n      res.json({ quiz });\n    } catch (error) {\n      console.error(\"Create quiz error:\", error);\n      res.status(400).json({ message: \"Invalid quiz data\" });\n    }\n  });\n\n  app.patch(\"/api/quiz/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const quiz = await storage.updateQuiz(req.params.id, updates);\n      res.json({ quiz });\n    } catch (error) {\n      console.error(\"Update quiz error:\", error);\n      res.status(500).json({ message: \"Failed to update quiz\" });\n    }\n  });\n\n  app.delete(\"/api/quiz/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteQuiz(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Quiz not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Delete quiz error:\", error);\n      res.status(500).json({ message: \"Failed to delete quiz\" });\n    }\n  });\n\n  // AI Quiz Generation routes\n  app.post(\"/api/ai/generate-from-text\", async (req, res) => {\n    try {\n      const { content, options } = req.body;\n      \n      if (!content || !options) {\n        return res.status(400).json({ message: \"Content and options required\" });\n      }\n      \n      const questions = await aiQuizGenerator.generateFromText(content, options);\n      res.json({ questions });\n    } catch (error) {\n      console.error(\"AI generation error:\", error);\n      res.status(500).json({ message: (error as Error).message || \"Failed to generate questions\" });\n    }\n  });\n\n  app.post(\"/api/ai/generate-from-url\", async (req, res) => {\n    try {\n      const { url, options } = req.body;\n      \n      if (!url || !options) {\n        return res.status(400).json({ message: \"URL and options required\" });\n      }\n      \n      const questions = await aiQuizGenerator.generateFromURL(url, options);\n      res.json({ questions });\n    } catch (error) {\n      console.error(\"AI URL generation error:\", error);\n      res.status(500).json({ message: (error as Error).message || \"Failed to generate questions from URL\" });\n    }\n  });\n\n  // Session routes\n  app.post(\"/api/session\", async (req, res) => {\n    try {\n      const sessionData = req.body;\n      \n      // Generate unique session code\n      const sessionCode = randomBytes(3).toString('hex').toUpperCase();\n      \n      const session = await storage.createSession({\n        ...sessionData,\n        sessionCode,\n        participants: []\n      });\n      \n      res.json({ session });\n    } catch (error) {\n      console.error(\"Create session error:\", error);\n      res.status(500).json({ message: \"Failed to create session\" });\n    }\n  });\n\n  app.get(\"/api/session/:id\", async (req, res) => {\n    try {\n      const session = await storage.getSession(req.params.id);\n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n      res.json({ session });\n    } catch (error) {\n      console.error(\"Get session error:\", error);\n      res.status(500).json({ message: \"Failed to get session\" });\n    }\n  });\n\n  app.get(\"/api/session/code/:code\", async (req, res) => {\n    try {\n      const session = await storage.getSessionByCode(req.params.code);\n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n      res.json({ session });\n    } catch (error) {\n      console.error(\"Get session by code error:\", error);\n      res.status(500).json({ message: \"Failed to get session\" });\n    }\n  });\n\n  app.get(\"/api/sessions/active/:userId\", async (req, res) => {\n    try {\n      const sessions = await storage.getActiveSessionsByUser(req.params.userId);\n      res.json({ sessions });\n    } catch (error) {\n      console.error(\"Get active sessions error:\", error);\n      res.status(500).json({ message: \"Failed to get active sessions\" });\n    }\n  });\n\n  // Analytics routes\n  app.get(\"/api/session/:id/responses\", async (req, res) => {\n    try {\n      const responses = await storage.getResponsesBySession(req.params.id);\n      res.json({ responses });\n    } catch (error) {\n      console.error(\"Get responses error:\", error);\n      res.status(500).json({ message: \"Failed to get responses\" });\n    }\n  });\n\n  app.get(\"/api/session/:id/analytics\", async (req, res) => {\n    try {\n      const session = await storage.getSession(req.params.id);\n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n\n      const responses = await storage.getResponsesBySession(req.params.id);\n      const quiz = await storage.getQuiz(session.quizId);\n      \n      // Calculate analytics\n      const participants = Array.isArray(session.participants) ? session.participants : [];\n      const totalQuestions = Array.isArray(quiz?.questions) ? quiz.questions.length : 0;\n      \n      const analytics = {\n        sessionInfo: {\n          id: session.id,\n          sessionCode: session.sessionCode,\n          status: session.status,\n          startedAt: session.startedAt,\n          completedAt: session.completedAt,\n        },\n        participantStats: {\n          totalParticipants: participants.length,\n          averageScore: participants.length > 0 \n            ? participants.reduce((sum, p) => sum + p.score, 0) / participants.length \n            : 0,\n          topPerformers: participants\n            .sort((a, b) => b.score - a.score)\n            .slice(0, 5),\n        },\n        questionStats: Array.isArray(quiz?.questions) ? quiz.questions.map((question, index) => {\n          const questionResponses = responses.filter(r => r.questionIndex === index);\n          const correctResponses = questionResponses.filter(r => r.isCorrect);\n          \n          return {\n            questionIndex: index,\n            question: question.question,\n            totalResponses: questionResponses.length,\n            correctResponses: correctResponses.length,\n            accuracy: questionResponses.length > 0 \n              ? (correctResponses.length / questionResponses.length) * 100 \n              : 0,\n            averageTime: questionResponses.length > 0\n              ? questionResponses.reduce((sum, r) => sum + r.responseTime, 0) / questionResponses.length\n              : 0,\n          };\n        }) : [],\n        responseData: responses,\n      };\n      \n      res.json({ analytics });\n    } catch (error) {\n      console.error(\"Get analytics error:\", error);\n      res.status(500).json({ message: \"Failed to get analytics\" });\n    }\n  });\n\n  // Export routes\n  app.get(\"/api/session/:id/export/csv\", async (req, res) => {\n    try {\n      const session = await storage.getSession(req.params.id);\n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n\n      const responses = await storage.getResponsesBySession(req.params.id);\n      \n      // Generate CSV data\n      const csvHeaders = \"Participant ID,Question Index,Answer,Is Correct,Response Time,Points,Streak,Created At\\n\";\n      const csvData = responses.map(r => \n        `${r.participantId},${r.questionIndex},\"${r.answer}\",${r.isCorrect},${r.responseTime},${r.points},${r.streak},${r.createdAt?.toISOString()}`\n      ).join(\"\\n\");\n      \n      const csv = csvHeaders + csvData;\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"quiz-session-${session.sessionCode}-responses.csv\"`);\n      res.send(csv);\n    } catch (error) {\n      console.error(\"Export CSV error:\", error);\n      res.status(500).json({ message: \"Failed to export CSV\" });\n    }\n  });\n\n  // Question Bank routes\n  app.get(\"/api/questions\", async (req, res) => {\n    try {\n      const { userId, search } = req.query;\n      if (!userId) {\n        return res.status(400).json({ message: \"User ID required\" });\n      }\n      \n      let questions;\n      if (search) {\n        questions = await storage.searchQuestions(userId as string, search as string);\n      } else {\n        questions = await storage.getQuestionsByUser(userId as string);\n      }\n      \n      res.json({ questions });\n    } catch (error) {\n      console.error(\"Get questions error:\", error);\n      res.status(500).json({ message: \"Failed to get questions\" });\n    }\n  });\n\n  app.post(\"/api/question\", async (req, res) => {\n    try {\n      const questionData = req.body;\n      const question = await storage.createQuestion(questionData);\n      res.json({ question });\n    } catch (error) {\n      console.error(\"Create question error:\", error);\n      res.status(400).json({ message: \"Invalid question data\" });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":11867},"server/storage.ts":{"content":"import { type User, type InsertUser, type Quiz, type InsertQuiz, type Session, type InsertSession, type Response, type InsertResponse, type QuestionBankItem, type InsertQuestion } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n\n  // Quizzes\n  getQuiz(id: string): Promise<Quiz | undefined>;\n  getQuizzesByUser(userId: string): Promise<Quiz[]>;\n  createQuiz(quiz: InsertQuiz): Promise<Quiz>;\n  updateQuiz(id: string, updates: Partial<Quiz>): Promise<Quiz>;\n  deleteQuiz(id: string): Promise<boolean>;\n\n  // Sessions\n  getSession(id: string): Promise<Session | undefined>;\n  getSessionByCode(code: string): Promise<Session | undefined>;\n  createSession(session: InsertSession): Promise<Session>;\n  updateSession(id: string, updates: Partial<Session>): Promise<Session>;\n  getActiveSessionsByUser(userId: string): Promise<Session[]>;\n\n  // Responses\n  createResponse(response: InsertResponse): Promise<Response>;\n  getResponsesBySession(sessionId: string): Promise<Response[]>;\n\n  // Question Bank\n  getQuestionById(id: string): Promise<QuestionBankItem | undefined>;\n  getQuestionsByUser(userId: string): Promise<QuestionBankItem[]>;\n  createQuestion(question: InsertQuestion): Promise<QuestionBankItem>;\n  searchQuestions(userId: string, query: string): Promise<QuestionBankItem[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private quizzes: Map<string, Quiz>;\n  private sessions: Map<string, Session>;\n  private responses: Map<string, Response>;\n  private questions: Map<string, QuestionBankItem>;\n\n  constructor() {\n    this.users = new Map();\n    this.quizzes = new Map();\n    this.sessions = new Map();\n    this.responses = new Map();\n    this.questions = new Map();\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      id,\n      email: insertUser.email,\n      username: insertUser.username,\n      role: insertUser.role || \"student\",\n      preferredLanguage: insertUser.preferredLanguage || \"en\",\n      theme: insertUser.theme || \"playful\",\n      organizationName: insertUser.organizationName || null,\n      organizationLogo: insertUser.organizationLogo || null,\n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const user = this.users.get(id);\n    if (!user) throw new Error(\"User not found\");\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Quizzes\n  async getQuiz(id: string): Promise<Quiz | undefined> {\n    return this.quizzes.get(id);\n  }\n\n  async getQuizzesByUser(userId: string): Promise<Quiz[]> {\n    return Array.from(this.quizzes.values()).filter(quiz => quiz.createdBy === userId);\n  }\n\n  async createQuiz(insertQuiz: InsertQuiz): Promise<Quiz> {\n    const id = randomUUID();\n    const quiz: Quiz = { \n      id,\n      title: insertQuiz.title,\n      description: insertQuiz.description || null,\n      createdBy: insertQuiz.createdBy,\n      questions: insertQuiz.questions,\n      settings: insertQuiz.settings,\n      language: insertQuiz.language || \"en\",\n      isPublic: insertQuiz.isPublic || false,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.quizzes.set(id, quiz);\n    return quiz;\n  }\n\n  async updateQuiz(id: string, updates: Partial<Quiz>): Promise<Quiz> {\n    const quiz = this.quizzes.get(id);\n    if (!quiz) throw new Error(\"Quiz not found\");\n    \n    const updatedQuiz = { ...quiz, ...updates, updatedAt: new Date() };\n    this.quizzes.set(id, updatedQuiz);\n    return updatedQuiz;\n  }\n\n  async deleteQuiz(id: string): Promise<boolean> {\n    return this.quizzes.delete(id);\n  }\n\n  // Sessions\n  async getSession(id: string): Promise<Session | undefined> {\n    return this.sessions.get(id);\n  }\n\n  async getSessionByCode(code: string): Promise<Session | undefined> {\n    return Array.from(this.sessions.values()).find(session => session.sessionCode === code);\n  }\n\n  async createSession(insertSession: InsertSession): Promise<Session> {\n    const id = randomUUID();\n    const session: Session = { \n      id,\n      quizId: insertSession.quizId,\n      hostId: insertSession.hostId,\n      sessionCode: insertSession.sessionCode,\n      status: insertSession.status || \"waiting\",\n      currentQuestionIndex: insertSession.currentQuestionIndex || 0,\n      participants: insertSession.participants || [],\n      settings: insertSession.settings,\n      startedAt: insertSession.startedAt || null,\n      completedAt: insertSession.completedAt || null,\n      createdAt: new Date()\n    };\n    this.sessions.set(id, session);\n    return session;\n  }\n\n  async updateSession(id: string, updates: Partial<Session>): Promise<Session> {\n    const session = this.sessions.get(id);\n    if (!session) throw new Error(\"Session not found\");\n    \n    const updatedSession = { ...session, ...updates };\n    this.sessions.set(id, updatedSession);\n    return updatedSession;\n  }\n\n  async getActiveSessionsByUser(userId: string): Promise<Session[]> {\n    return Array.from(this.sessions.values())\n      .filter(session => session.hostId === userId && session.status !== \"completed\");\n  }\n\n  // Responses\n  async createResponse(insertResponse: InsertResponse): Promise<Response> {\n    const id = randomUUID();\n    const response: Response = { \n      id,\n      sessionId: insertResponse.sessionId,\n      participantId: insertResponse.participantId,\n      questionIndex: insertResponse.questionIndex,\n      answer: insertResponse.answer,\n      isCorrect: insertResponse.isCorrect,\n      responseTime: insertResponse.responseTime,\n      points: insertResponse.points || 0,\n      streak: insertResponse.streak || 0,\n      createdAt: new Date()\n    };\n    this.responses.set(id, response);\n    return response;\n  }\n\n  async getResponsesBySession(sessionId: string): Promise<Response[]> {\n    return Array.from(this.responses.values())\n      .filter(response => response.sessionId === sessionId);\n  }\n\n  // Question Bank\n  async getQuestionById(id: string): Promise<QuestionBankItem | undefined> {\n    return this.questions.get(id);\n  }\n\n  async getQuestionsByUser(userId: string): Promise<QuestionBankItem[]> {\n    return Array.from(this.questions.values())\n      .filter(question => question.createdBy === userId);\n  }\n\n  async createQuestion(insertQuestion: InsertQuestion): Promise<QuestionBankItem> {\n    const id = randomUUID();\n    const question: QuestionBankItem = { \n      id,\n      createdBy: insertQuestion.createdBy,\n      question: insertQuestion.question,\n      type: insertQuestion.type,\n      options: insertQuestion.options || null,\n      correctAnswer: insertQuestion.correctAnswer,\n      explanation: insertQuestion.explanation || null,\n      difficulty: insertQuestion.difficulty || \"medium\",\n      category: insertQuestion.category || null,\n      tags: insertQuestion.tags || [],\n      source: insertQuestion.source || null,\n      language: insertQuestion.language || \"en\",\n      createdAt: new Date()\n    };\n    this.questions.set(id, question);\n    return question;\n  }\n\n  async searchQuestions(userId: string, query: string): Promise<QuestionBankItem[]> {\n    const userQuestions = await this.getQuestionsByUser(userId);\n    return userQuestions.filter(question => \n      question.question.toLowerCase().includes(query.toLowerCase()) ||\n      question.category?.toLowerCase().includes(query.toLowerCase())\n    );\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":8042},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  username: text(\"username\").notNull(),\n  role: text(\"role\").notNull().default(\"student\"), // professional, student, teacher\n  preferredLanguage: text(\"preferred_language\").notNull().default(\"en\"),\n  theme: text(\"theme\").notNull().default(\"playful\"), // playful, minimal\n  organizationName: text(\"organization_name\"),\n  organizationLogo: text(\"organization_logo\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const quizzes = pgTable(\"quizzes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  questions: jsonb(\"questions\").notNull(), // Array of question objects\n  settings: jsonb(\"settings\").notNull(), // Game mode, timer, features\n  language: text(\"language\").notNull().default(\"en\"),\n  isPublic: boolean(\"is_public\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  quizId: varchar(\"quiz_id\").notNull().references(() => quizzes.id),\n  hostId: varchar(\"host_id\").notNull().references(() => users.id),\n  sessionCode: varchar(\"session_code\", { length: 6 }).notNull().unique(),\n  status: text(\"status\").notNull().default(\"waiting\"), // waiting, active, paused, completed\n  currentQuestionIndex: integer(\"current_question_index\").notNull().default(0),\n  participants: jsonb(\"participants\").notNull().default('[]'), // Array of participant objects\n  settings: jsonb(\"settings\").notNull(),\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const responses = pgTable(\"responses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").notNull().references(() => sessions.id),\n  participantId: varchar(\"participant_id\").notNull(),\n  questionIndex: integer(\"question_index\").notNull(),\n  answer: text(\"answer\").notNull(),\n  isCorrect: boolean(\"is_correct\").notNull(),\n  responseTime: integer(\"response_time\").notNull(), // in milliseconds\n  points: integer(\"points\").notNull().default(0),\n  streak: integer(\"streak\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const questionBank = pgTable(\"question_bank\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  question: text(\"question\").notNull(),\n  type: text(\"type\").notNull(), // mcq, true_false, short_answer, poll\n  options: jsonb(\"options\"), // Array of options for MCQ\n  correctAnswer: text(\"correct_answer\").notNull(),\n  explanation: text(\"explanation\"),\n  difficulty: text(\"difficulty\").notNull().default(\"medium\"), // easy, medium, hard\n  category: text(\"category\"),\n  tags: jsonb(\"tags\").default('[]'), // Array of tags\n  source: text(\"source\"), // Citation from AI generation\n  language: text(\"language\").notNull().default(\"en\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQuizSchema = createInsertSchema(quizzes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertResponseSchema = createInsertSchema(responses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQuestionSchema = createInsertSchema(questionBank).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Quiz = typeof quizzes.$inferSelect;\nexport type InsertQuiz = z.infer<typeof insertQuizSchema>;\n\nexport type Session = typeof sessions.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\n\nexport type Response = typeof responses.$inferSelect;\nexport type InsertResponse = z.infer<typeof insertResponseSchema>;\n\nexport type QuestionBankItem = typeof questionBank.$inferSelect;\nexport type InsertQuestion = z.infer<typeof insertQuestionSchema>;\n\n// Question types\nexport interface Question {\n  id: string;\n  text: string;\n  type: \"mcq\" | \"true_false\" | \"short_answer\" | \"poll\";\n  options?: string[];\n  correctAnswer: string;\n  explanation?: string;\n  difficulty: \"easy\" | \"medium\" | \"hard\";\n  source?: string;\n  timeLimit?: number;\n}\n\nexport interface Participant {\n  id: string;\n  nickname: string;\n  joinedAt: string;\n  isReady: boolean;\n  score: number;\n  streak: number;\n  avatar?: string;\n}\n\nexport interface GameSettings {\n  mode: \"speed\" | \"accuracy\" | \"team\";\n  timePerQuestion: number;\n  enableStreaks: boolean;\n  enableConfetti: boolean;\n  enableSounds: boolean;\n  showAnswersAfterEach: boolean;\n}\n","size_bytes":5440},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { Navigation } from \"@/components/navigation\";\nimport { QuriousSidebar } from \"@/components/sidebar\";\nimport { SidebarProvider, SidebarInset } from \"@/components/ui/sidebar\";\n\nimport Dashboard from \"@/pages/dashboard\";\nimport AIBuilder from \"@/pages/ai-builder\";\nimport HostLive from \"@/pages/host-live\";\nimport JoinQuiz from \"@/pages/join-quiz\";\nimport Results from \"@/pages/results\";\nimport Auth from \"@/pages/auth\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/auth\" component={Auth} />\n      <Route path=\"/ai-builder\" component={AIBuilder} />\n      <Route path=\"/host-live\" component={HostLive} />\n      <Route path=\"/join/:code?\" component={JoinQuiz} />\n      <Route path=\"/results\" component={Results} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <SidebarProvider>\n            <div className=\"min-h-screen bg-background\">\n              {/* Fixed Sidebar Background - Ensure visibility */}\n              <div \n                className=\"hidden md:block fixed left-0 top-0 w-64 h-full bg-white border-r border-gray-200 z-10\"\n                style={{ \n                  backgroundColor: '#ffffff',\n                  borderRight: '1px solid #e2e8f0',\n                  width: '16rem',\n                  height: '100vh',\n                  position: 'fixed',\n                  left: 0,\n                  top: 0,\n                  zIndex: 10\n                }}\n              >\n                {/* This ensures sidebar background is always visible */}\n              </div>\n              \n              {/* Modern Sidebar Navigation - Content overlay */}\n              <div className=\"relative z-20\">\n                <QuriousSidebar />\n              </div>\n              \n              {/* Main Content Area - Offset for sidebar */}\n              <SidebarInset className=\"md:ml-64\" style={{ marginLeft: '0' }}>\n                <div className=\"md:ml-64\">\n                  {/* Simplified Header */}\n                  <Navigation />\n                  \n                  {/* Page Content */}\n                  <div className=\"flex flex-1 flex-col\">\n                    <Router />\n                  </div>\n                </div>\n              </SidebarInset>\n              \n              {/* Toast notifications */}\n              <Toaster />\n            </div>\n          </SidebarProvider>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2975},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --radius: 0.5rem;\n  \n  /* Professional Theme Colors - N8N Inspired */\n  --playful-background: hsl(0, 0%, 100%);\n  --playful-foreground: hsl(224, 71.4%, 4.1%);\n  --playful-card: hsl(0, 0%, 100%);\n  --playful-card-foreground: hsl(224, 71.4%, 4.1%);\n  --playful-primary: hsl(220.9, 39.3%, 11%);\n  --playful-primary-foreground: hsl(0, 0%, 98%);\n  --playful-secondary: hsl(220, 14.3%, 95.9%);\n  --playful-secondary-foreground: hsl(220.9, 39.3%, 11%);\n  --playful-accent: hsl(217.2, 91.2%, 59.8%);\n  --playful-accent-foreground: hsl(0, 0%, 98%);\n  --playful-muted: hsl(220, 14.3%, 95.9%);\n  --playful-muted-foreground: hsl(220, 8.9%, 46.1%);\n  --playful-border: hsl(220, 13%, 91%);\n  --playful-input: hsl(220, 13%, 91%);\n  --playful-ring: hsl(217.2, 91.2%, 59.8%);\n  --playful-popover: hsl(0, 0%, 100%);\n  --playful-popover-foreground: hsl(224, 71.4%, 4.1%);\n  --playful-success: hsl(142, 76%, 36%);\n  --playful-warning: hsl(38, 92%, 50%);\n  --playful-destructive: hsl(0, 84%, 60%);\n  --playful-destructive-foreground: hsl(0, 0%, 98%);\n  \n  /* Minimal Theme Colors - N8N Professional */\n  --minimal-background: hsl(0, 0%, 100%);\n  --minimal-foreground: hsl(224, 71.4%, 4.1%);\n  --minimal-card: hsl(0, 0%, 100%);\n  --minimal-card-foreground: hsl(224, 71.4%, 4.1%);\n  --minimal-primary: hsl(220.9, 39.3%, 11%);\n  --minimal-primary-foreground: hsl(0, 0%, 98%);\n  --minimal-secondary: hsl(220, 14.3%, 95.9%);\n  --minimal-secondary-foreground: hsl(220.9, 39.3%, 11%);\n  --minimal-accent: hsl(217.2, 91.2%, 59.8%);\n  --minimal-accent-foreground: hsl(0, 0%, 98%);\n  --minimal-muted: hsl(220, 14.3%, 95.9%);\n  --minimal-muted-foreground: hsl(220, 8.9%, 46.1%);\n  --minimal-border: hsl(220, 13%, 91%);\n  --minimal-input: hsl(220, 13%, 91%);\n  --minimal-ring: hsl(217.2, 91.2%, 59.8%);\n  --minimal-popover: hsl(0, 0%, 100%);\n  --minimal-popover-foreground: hsl(224, 71.4%, 4.1%);\n  --minimal-success: hsl(142, 76%, 36%);\n  --minimal-warning: hsl(38, 92%, 50%);\n  --minimal-destructive: hsl(0, 84%, 60%);\n  --minimal-destructive-foreground: hsl(0, 0%, 98%);\n  \n  /* Default to Playful Theme */\n  --background: var(--playful-background);\n  --foreground: var(--playful-foreground);\n  --card: var(--playful-card);\n  --card-foreground: var(--playful-card-foreground);\n  --primary: var(--playful-primary);\n  --primary-foreground: var(--playful-primary-foreground);\n  --secondary: var(--playful-secondary);\n  --secondary-foreground: var(--playful-secondary-foreground);\n  --accent: var(--playful-accent);\n  --accent-foreground: var(--playful-accent-foreground);\n  --muted: var(--playful-muted);\n  --muted-foreground: var(--playful-muted-foreground);\n  --border: var(--playful-border);\n  --input: var(--playful-input);\n  --ring: var(--playful-ring);\n  --success: var(--playful-success);\n  --warning: var(--playful-warning);\n  --destructive: var(--playful-destructive);\n  --destructive-foreground: var(--playful-destructive-foreground);\n  --popover: var(--playful-popover);\n  --popover-foreground: var(--playful-popover-foreground);\n  \n  /* Font settings */\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  \n  /* Sidebar Variables - Professional Theme */\n  --sidebar-background: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(224, 71.4%, 4.1%);\n  --sidebar-primary: hsl(220.9, 39.3%, 11%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(220, 14.3%, 95.9%);\n  --sidebar-accent-foreground: hsl(224, 71.4%, 4.1%);\n  --sidebar-border: hsl(220, 13%, 91%);\n  --sidebar-ring: hsl(217.2, 91.2%, 59.8%);\n}\n\n.theme-minimal {\n  --background: var(--minimal-background);\n  --foreground: var(--minimal-foreground);\n  --card: var(--minimal-card);\n  --card-foreground: var(--minimal-card-foreground);\n  --primary: var(--minimal-primary);\n  --primary-foreground: var(--minimal-primary-foreground);\n  --secondary: var(--minimal-secondary);\n  --secondary-foreground: var(--minimal-secondary-foreground);\n  --accent: var(--minimal-accent);\n  --accent-foreground: var(--minimal-accent-foreground);\n  --muted: var(--minimal-muted);\n  --muted-foreground: var(--minimal-muted-foreground);\n  --border: var(--minimal-border);\n  --input: var(--minimal-input);\n  --ring: var(--minimal-ring);\n  --success: var(--minimal-success);\n  --warning: var(--minimal-warning);\n  --destructive: var(--minimal-destructive);\n  --destructive-foreground: var(--minimal-destructive-foreground);\n  --popover: var(--minimal-popover);\n  --popover-foreground: var(--minimal-popover-foreground);\n  \n  /* Sidebar Variables - Professional Minimal Theme */\n  --sidebar-background: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(224, 71.4%, 4.1%);\n  --sidebar-primary: hsl(220.9, 39.3%, 11%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(220, 14.3%, 95.9%);\n  --sidebar-accent-foreground: hsl(224, 71.4%, 4.1%);\n  --sidebar-border: hsl(220, 13%, 91%);\n  --sidebar-ring: hsl(217.2, 91.2%, 59.8%);\n}\n\n.theme-minimal .gradient-primary {\n  background: hsl(220.9, 39.3%, 11%);\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased text-foreground;\n    font-family: var(--font-sans);\n    background: var(--background);\n    min-height: 100vh;\n  }\n}\n\n/* Custom animations */\n@keyframes confetti-fall {\n  0% {\n    transform: translateY(-100vh) rotate(0deg);\n    opacity: 1;\n  }\n  100% {\n    transform: translateY(100vh) rotate(360deg);\n    opacity: 0;\n  }\n}\n\n@keyframes pulse-border {\n  0%, 100% { \n    border-color: hsl(var(--primary)); \n  }\n  50% { \n    border-color: hsl(var(--accent)); \n  }\n}\n\n@keyframes slide-in {\n  from { \n    transform: translateX(-100%); \n    opacity: 0; \n  }\n  to { \n    transform: translateX(0); \n    opacity: 1; \n  }\n}\n\n@keyframes bounce-in {\n  from { \n    transform: scale(0) rotate(180deg); \n    opacity: 0; \n  }\n  to { \n    transform: scale(1) rotate(0deg); \n    opacity: 1; \n  }\n}\n\n@keyframes skeleton-loading {\n  0% { \n    background-position: 200% 0; \n  }\n  100% { \n    background-position: -200% 0; \n  }\n}\n\n/* Modern Design Tokens - Spacing Scale */\n:root {\n  --spacing-1: 0.25rem;   /* 4px */\n  --spacing-2: 0.5rem;    /* 8px */\n  --spacing-3: 0.75rem;   /* 12px */\n  --spacing-4: 1rem;      /* 16px */\n  --spacing-5: 1.25rem;   /* 20px */\n  --spacing-6: 1.5rem;    /* 24px */\n  --spacing-8: 2rem;      /* 32px */\n  --spacing-10: 2.5rem;   /* 40px */\n  --spacing-12: 3rem;     /* 48px */\n  --spacing-16: 4rem;     /* 64px */\n  \n  /* Typography Scale */\n  --text-xs: 0.75rem;     /* 12px */\n  --text-sm: 0.875rem;    /* 14px */\n  --text-base: 1rem;      /* 16px */\n  --text-lg: 1.125rem;    /* 18px */\n  --text-xl: 1.25rem;     /* 20px */\n  --text-2xl: 1.5rem;     /* 24px */\n  --text-3xl: 1.875rem;   /* 30px */\n  --text-4xl: 2.25rem;    /* 36px */\n  \n  /* Shadow Tokens */\n  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n}\n\n/* Enhanced Button Variants - Professional N8N Style */\n.btn-primary-lg {\n  background: hsl(220.9, 39.3%, 11%);\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n  padding: var(--spacing-6) var(--spacing-8);\n  font-size: var(--text-lg);\n  font-weight: 500;\n  border-radius: 0.5rem;\n  transition: all 0.2s ease-in-out;\n  color: hsl(0, 0%, 98%);\n  border: none;\n}\n\n.btn-primary-lg:hover {\n  background: hsl(220.9, 39.3%, 15%);\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n.btn-secondary-lg {\n  background: hsl(217.2, 91.2%, 59.8%);\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n  padding: var(--spacing-6) var(--spacing-8);\n  font-size: var(--text-lg);\n  font-weight: 500;\n  border-radius: 0.5rem;\n  transition: all 0.2s ease-in-out;\n  color: hsl(0, 0%, 98%);\n  border: none;\n}\n\n.btn-secondary-lg:hover {\n  background: hsl(217.2, 91.2%, 65%);\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n/* Enhanced Card Styles - N8N Professional */\n.card-modern {\n  background: hsl(0, 0%, 100%);\n  border: 1px solid hsl(220, 13%, 91%);\n  border-radius: 0.5rem;\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n  transition: all 0.2s ease-in-out;\n}\n\n.card-modern:hover {\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n.card-elevated {\n  background: hsl(0, 0%, 100%);\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n  border: 1px solid hsl(220, 13%, 91%);\n  border-radius: 0.5rem;\n  transition: all 0.2s ease-in-out;\n}\n\n.card-elevated:hover {\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n/* Utility classes */\n.confetti-piece {\n  width: 8px;\n  height: 8px;\n  position: absolute;\n  animation: confetti-fall 2s linear forwards;\n}\n\n.pulse-border {\n  animation: pulse-border 2s infinite;\n}\n\n.slide-in {\n  animation: slide-in 0.3s ease-out;\n}\n\n.bounce-in {\n  animation: bounce-in 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n}\n\n.skeleton {\n  background: linear-gradient(90deg, hsl(var(--muted)) 25%, hsl(var(--background)) 50%, hsl(var(--muted)) 75%);\n  background-size: 200% 100%;\n  animation: skeleton-loading 1.5s infinite;\n}\n\n/* Mobile-first optimizations */\n.touch-target {\n  min-height: 44px;\n  min-width: 44px;\n}\n\n/* Hide scrollbars but maintain functionality */\n.scrollbar-hide {\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n}\n\n.scrollbar-hide::-webkit-scrollbar {\n  display: none;\n}\n\n/* Professional N8N Style Backgrounds */\n.gradient-primary {\n  background: hsl(220.9, 39.3%, 11%);\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n}\n\n.gradient-accent {\n  background: hsl(217.2, 91.2%, 59.8%);\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n}\n\n.gradient-success {\n  background: hsl(142, 76%, 36%);\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n}\n\n/* Clean Card Backgrounds */\n.gradient-card {\n  background: hsl(0, 0%, 100%);\n  border: 1px solid hsl(220, 13%, 91%);\n}\n\n/* Clean effect for panels */\n.glass-panel {\n  background: hsl(0, 0%, 100%);\n  border: 1px solid hsl(220, 13%, 91%);\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n}\n\n/* High contrast mode for accessibility */\n@media (prefers-contrast: high) {\n  :root {\n    --border: hsl(0, 0%, 0%);\n    --ring: hsl(0, 0%, 0%);\n  }\n  \n  .theme-minimal {\n    --border: hsl(0, 0%, 0%);\n    --ring: hsl(0, 0%, 0%);\n  }\n}\n\n/* Reduced motion for accessibility */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n\n/* Sidebar Explicit Styling - Ensure solid backgrounds */\n[data-testid=\"sidebar-main\"],\n.bg-sidebar,\n[data-sidebar=\"sidebar\"] {\n  background-color: #ffffff !important; /* White background */\n  border-right: 1px solid #e2e8f0 !important; /* Light gray border */\n}\n\n.theme-minimal [data-testid=\"sidebar-main\"],\n.theme-minimal .bg-sidebar,\n.theme-minimal [data-sidebar=\"sidebar\"] {\n  background-color: #ffffff !important; /* White background for minimal theme */\n  border-right: 1px solid #d1d5db !important; /* Minimal theme border */\n}\n\n/* Sidebar text colors */\n.text-sidebar-foreground {\n  color: hsl(220, 90%, 12%) !important;\n}\n\n.theme-minimal .text-sidebar-foreground {\n  color: hsl(220, 90%, 10%) !important;\n}\n\n/* Sidebar accent colors for hover states */\n.bg-sidebar-accent {\n  background-color: hsl(240, 50%, 92%) !important;\n}\n\n.theme-minimal .bg-sidebar-accent {\n  background-color: hsl(220, 20%, 90%) !important;\n}\n\n/* Ensure main content offset for sidebar */\n.peer-data-\\[state\\=expanded\\]\\:ml-\\[var\\(--sidebar-width\\)\\] {\n  margin-left: 16rem !important;\n}\n\n/* Dark mode support (if needed later) */\n@media (prefers-color-scheme: dark) {\n  .auto-theme {\n    --background: hsl(0, 0%, 0%);\n    --foreground: hsl(0, 0%, 95%);\n    --card: hsl(0, 0%, 5%);\n    --card-foreground: hsl(0, 0%, 95%);\n  }\n}\n","size_bytes":12523},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/ai-quiz-generator.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nexport interface GeneratedQuestion {\n  question: string;\n  type: \"mcq\" | \"true_false\" | \"short_answer\" | \"poll\";\n  options?: string[];\n  correctAnswer: string;\n  explanation?: string;\n  difficulty: \"easy\" | \"medium\" | \"hard\";\n  source?: string;\n  category?: string;\n}\n\nexport interface QuizGenerationOptions {\n  questionTypes: string[];\n  questionCount: number;\n  difficulty: \"easy\" | \"medium\" | \"hard\" | \"mixed\";\n  language: string;\n  topic?: string;\n}\n\nexport class AIQuizGenerator {\n  async generateFromText(content: string, options: QuizGenerationOptions): Promise<GeneratedQuestion[]> {\n    try {\n      const prompt = this.buildPrompt(content, options);\n      \n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert quiz creator. Generate educational quiz questions based on the provided content. Always respond with valid JSON in the specified format.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.7,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      if (!result.questions || !Array.isArray(result.questions)) {\n        throw new Error(\"Invalid response format from AI\");\n      }\n\n      return this.validateAndCleanQuestions(result.questions);\n    } catch (error) {\n      console.error(\"AI Quiz Generation Error:\", error);\n      throw new Error(\"Failed to generate quiz questions: \" + (error as Error).message);\n    }\n  }\n\n  async generateFromURL(url: string, options: QuizGenerationOptions): Promise<GeneratedQuestion[]> {\n    try {\n      // Extract content from URL\n      const content = await this.extractContentFromURL(url);\n      return this.generateFromText(content, options);\n    } catch (error) {\n      console.error(\"URL Content Extraction Error:\", error);\n      throw new Error(\"Failed to extract content from URL: \" + (error as Error).message);\n    }\n  }\n\n  private buildPrompt(content: string, options: QuizGenerationOptions): string {\n    const questionTypesText = options.questionTypes.join(\", \");\n    \n    return `\nCreate ${options.questionCount} quiz questions based on the following content. \n\nContent:\n${content}\n\nRequirements:\n- Question types: ${questionTypesText}\n- Difficulty: ${options.difficulty}\n- Language: ${options.language}\n${options.topic ? `- Focus on topic: ${options.topic}` : ''}\n\nFor each question, provide:\n1. Clear, concise question text\n2. Question type (mcq, true_false, short_answer, or poll)\n3. For MCQ: 4 options with one correct answer\n4. For True/False: boolean answer\n5. For Short Answer: expected answer phrase\n6. Brief explanation of the correct answer\n7. Difficulty level (easy/medium/hard)\n8. Source reference (page number, section, or URL)\n9. Category/topic classification\n\nEnsure questions are:\n- Educational and meaningful\n- Appropriate for the target difficulty\n- Diverse in topics covered\n- Free from bias or offensive content\n- Factually accurate\n\nRespond in JSON format:\n{\n  \"questions\": [\n    {\n      \"question\": \"Question text here\",\n      \"type\": \"mcq\",\n      \"options\": [\"Option 1\", \"Option 2\", \"Option 3\", \"Option 4\"],\n      \"correctAnswer\": \"Option 1\",\n      \"explanation\": \"Brief explanation\",\n      \"difficulty\": \"medium\",\n      \"source\": \"Source reference\",\n      \"category\": \"Topic category\"\n    }\n  ]\n}\n`;\n  }\n\n  private normalizeURL(url: string): string {\n    // Trim whitespace\n    url = url.trim();\n    \n    // Add protocol if missing\n    if (!url.match(/^https?:\\/\\//)) {\n      // Try HTTPS first, fallback to HTTP if needed\n      url = 'https://' + url;\n    }\n    \n    try {\n      // Validate URL format\n      new URL(url);\n      return url;\n    } catch (error) {\n      throw new Error(`Invalid URL format: ${url}`);\n    }\n  }\n\n  private async extractContentFromURL(url: string): Promise<string> {\n    try {\n      const normalizedURL = this.normalizeURL(url);\n      \n      const response = await fetch(normalizedURL, {\n        headers: {\n          'User-Agent': 'Qurious Quiz Generator Bot 1.0'\n        },\n        redirect: 'follow'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const html = await response.text();\n      \n      // Simple HTML text extraction (in production, use a proper HTML parser)\n      const textContent = html\n        .replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, '')\n        .replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, '')\n        .replace(/<[^>]*>/g, ' ')\n        .replace(/\\s+/g, ' ')\n        .trim();\n      \n      // Limit content length\n      return textContent.substring(0, 8000);\n    } catch (error) {\n      throw new Error(`Failed to fetch URL content: ${(error as Error).message}`);\n    }\n  }\n\n  private validateAndCleanQuestions(questions: any[]): GeneratedQuestion[] {\n    return questions\n      .filter(q => q.question && q.type && q.correctAnswer)\n      .map(q => ({\n        question: q.question.trim(),\n        type: q.type,\n        options: q.type === \"mcq\" ? (q.options || []) : undefined,\n        correctAnswer: q.correctAnswer.trim(),\n        explanation: q.explanation?.trim(),\n        difficulty: q.difficulty || \"medium\",\n        source: q.source?.trim(),\n        category: q.category?.trim()\n      }))\n      .slice(0, 25); // Limit to max 25 questions\n  }\n\n  async generateFromPDF(buffer: Buffer, options: QuizGenerationOptions): Promise<GeneratedQuestion[]> {\n    // This would require a PDF parsing library like pdf-parse\n    // For now, throw an error indicating it needs implementation\n    throw new Error(\"PDF parsing not yet implemented. Please use text input or URL instead.\");\n  }\n}\n\nexport const aiQuizGenerator = new AIQuizGenerator();\n","size_bytes":6163},"server/services/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from \"ws\";\nimport { type Server } from \"http\";\nimport { storage } from \"../storage\";\nimport { type Participant } from \"@shared/schema\";\n\ninterface WebSocketMessage {\n  type: string;\n  sessionId?: string;\n  participantId?: string;\n  data?: any;\n}\n\ninterface SessionConnection {\n  sessionId: string;\n  isHost: boolean;\n  participantId?: string;\n  userId?: string;\n}\n\nclass WebSocketManager {\n  private wss: WebSocketServer | null = null;\n  private connections: Map<WebSocket, SessionConnection> = new Map();\n  private sessionConnections: Map<string, Set<WebSocket>> = new Map();\n\n  init(server: Server) {\n    this.wss = new WebSocketServer({ server, path: '/ws' });\n    \n    this.wss.on('connection', (ws) => {\n      console.log('New WebSocket connection');\n      \n      ws.on('message', async (data) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(data.toString());\n          await this.handleMessage(ws, message);\n        } catch (error) {\n          console.error('WebSocket message error:', error);\n          this.sendError(ws, 'Invalid message format');\n        }\n      });\n\n      ws.on('close', () => {\n        this.handleDisconnection(ws);\n      });\n\n      ws.on('error', (error) => {\n        console.error('WebSocket error:', error);\n        this.handleDisconnection(ws);\n      });\n    });\n  }\n\n  private async handleMessage(ws: WebSocket, message: WebSocketMessage) {\n    switch (message.type) {\n      case 'join_session':\n        await this.handleJoinSession(ws, message);\n        break;\n      case 'host_session':\n        await this.handleHostSession(ws, message);\n        break;\n      case 'participant_answer':\n        await this.handleParticipantAnswer(ws, message);\n        break;\n      case 'host_next_question':\n        await this.handleNextQuestion(ws, message);\n        break;\n      case 'host_start_session':\n        await this.handleStartSession(ws, message);\n        break;\n      case 'host_pause_session':\n        await this.handlePauseSession(ws, message);\n        break;\n      case 'host_end_session':\n        await this.handleEndSession(ws, message);\n        break;\n      default:\n        this.sendError(ws, 'Unknown message type');\n    }\n  }\n\n  private async handleJoinSession(ws: WebSocket, message: WebSocketMessage) {\n    const { sessionCode, nickname } = message.data;\n    \n    try {\n      const session = await storage.getSessionByCode(sessionCode);\n      if (!session) {\n        this.sendError(ws, 'Session not found');\n        return;\n      }\n\n      if (session.status === 'completed') {\n        this.sendError(ws, 'Session has ended');\n        return;\n      }\n\n      const participantId = `participant_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      const participant: Participant = {\n        id: participantId,\n        nickname: nickname,\n        joinedAt: new Date().toISOString(),\n        isReady: true,\n        score: 0,\n        streak: 0,\n      };\n\n      // Add participant to session\n      const currentParticipants = Array.isArray(session.participants) ? session.participants : [];\n      currentParticipants.push(participant);\n      \n      await storage.updateSession(session.id, {\n        participants: currentParticipants\n      });\n\n      // Store connection info\n      this.connections.set(ws, {\n        sessionId: session.id,\n        isHost: false,\n        participantId: participantId\n      });\n\n      // Add to session connections\n      if (!this.sessionConnections.has(session.id)) {\n        this.sessionConnections.set(session.id, new Set());\n      }\n      this.sessionConnections.get(session.id)!.add(ws);\n\n      // Notify participant\n      this.sendMessage(ws, {\n        type: 'join_success',\n        data: {\n          sessionId: session.id,\n          participantId: participantId,\n          quiz: await storage.getQuiz(session.quizId)\n        }\n      });\n\n      // Notify all connections in session about new participant\n      this.broadcastToSession(session.id, {\n        type: 'participant_joined',\n        data: {\n          participant: participant,\n          totalParticipants: currentParticipants.length\n        }\n      });\n\n    } catch (error) {\n      console.error('Join session error:', error);\n      this.sendError(ws, 'Failed to join session');\n    }\n  }\n\n  private async handleHostSession(ws: WebSocket, message: WebSocketMessage) {\n    const { sessionId, userId } = message.data;\n    \n    try {\n      const session = await storage.getSession(sessionId);\n      if (!session) {\n        this.sendError(ws, 'Session not found');\n        return;\n      }\n\n      if (session.hostId !== userId) {\n        this.sendError(ws, 'Unauthorized');\n        return;\n      }\n\n      // Store connection info\n      this.connections.set(ws, {\n        sessionId: session.id,\n        isHost: true,\n        userId: userId\n      });\n\n      // Add to session connections\n      if (!this.sessionConnections.has(session.id)) {\n        this.sessionConnections.set(session.id, new Set());\n      }\n      this.sessionConnections.get(session.id)!.add(ws);\n\n      // Send current session state\n      this.sendMessage(ws, {\n        type: 'host_connected',\n        data: {\n          session: session,\n          participants: session.participants || []\n        }\n      });\n\n    } catch (error) {\n      console.error('Host session error:', error);\n      this.sendError(ws, 'Failed to connect as host');\n    }\n  }\n\n  private async handleParticipantAnswer(ws: WebSocket, message: WebSocketMessage) {\n    const connection = this.connections.get(ws);\n    if (!connection || connection.isHost) {\n      this.sendError(ws, 'Unauthorized');\n      return;\n    }\n\n    const { questionIndex, answer, responseTime } = message.data;\n    \n    try {\n      const session = await storage.getSession(connection.sessionId);\n      if (!session) {\n        this.sendError(ws, 'Session not found');\n        return;\n      }\n\n      const quiz = await storage.getQuiz(session.quizId);\n      if (!quiz) {\n        this.sendError(ws, 'Quiz not found');\n        return;\n      }\n\n      const questions = Array.isArray(quiz.questions) ? quiz.questions : [];\n      const currentQuestion = questions[questionIndex];\n      \n      if (!currentQuestion) {\n        this.sendError(ws, 'Invalid question index');\n        return;\n      }\n\n      // Calculate if answer is correct\n      const isCorrect = answer === currentQuestion.correctAnswer;\n      \n      // Calculate points (example scoring system)\n      let points = 0;\n      if (isCorrect) {\n        const timeBonus = Math.max(0, 1000 - responseTime);\n        points = 500 + timeBonus;\n      }\n\n      // Update participant streak\n      const participants = Array.isArray(session.participants) ? session.participants : [];\n      const participantIndex = participants.findIndex(p => p.id === connection.participantId);\n      \n      if (participantIndex >= 0) {\n        const participant = participants[participantIndex];\n        participant.score += points;\n        participant.streak = isCorrect ? participant.streak + 1 : 0;\n        \n        await storage.updateSession(session.id, { participants });\n      }\n\n      // Store response\n      await storage.createResponse({\n        sessionId: connection.sessionId,\n        participantId: connection.participantId!,\n        questionIndex: questionIndex,\n        answer: answer,\n        isCorrect: isCorrect,\n        responseTime: responseTime,\n        points: points,\n        streak: participants[participantIndex]?.streak || 0\n      });\n\n      // Send response confirmation to participant\n      this.sendMessage(ws, {\n        type: 'answer_received',\n        data: {\n          isCorrect: isCorrect,\n          points: points,\n          streak: participants[participantIndex]?.streak || 0\n        }\n      });\n\n      // Notify host of response\n      this.broadcastToSessionHosts(connection.sessionId, {\n        type: 'participant_answered',\n        data: {\n          participantId: connection.participantId,\n          questionIndex: questionIndex,\n          totalResponses: await this.getResponseCount(connection.sessionId, questionIndex)\n        }\n      });\n\n    } catch (error) {\n      console.error('Participant answer error:', error);\n      this.sendError(ws, 'Failed to process answer');\n    }\n  }\n\n  private async handleNextQuestion(ws: WebSocket, message: WebSocketMessage) {\n    const connection = this.connections.get(ws);\n    if (!connection || !connection.isHost) {\n      this.sendError(ws, 'Unauthorized');\n      return;\n    }\n\n    try {\n      const session = await storage.getSession(connection.sessionId);\n      if (!session) {\n        this.sendError(ws, 'Session not found');\n        return;\n      }\n\n      const nextQuestionIndex = session.currentQuestionIndex + 1;\n      \n      await storage.updateSession(session.id, {\n        currentQuestionIndex: nextQuestionIndex\n      });\n\n      // Broadcast next question to all participants\n      this.broadcastToSession(connection.sessionId, {\n        type: 'next_question',\n        data: {\n          questionIndex: nextQuestionIndex\n        }\n      });\n\n    } catch (error) {\n      console.error('Next question error:', error);\n      this.sendError(ws, 'Failed to advance question');\n    }\n  }\n\n  private async handleStartSession(ws: WebSocket, message: WebSocketMessage) {\n    const connection = this.connections.get(ws);\n    if (!connection || !connection.isHost) {\n      this.sendError(ws, 'Unauthorized');\n      return;\n    }\n\n    try {\n      await storage.updateSession(connection.sessionId, {\n        status: 'active',\n        startedAt: new Date()\n      });\n\n      this.broadcastToSession(connection.sessionId, {\n        type: 'session_started',\n        data: {}\n      });\n\n    } catch (error) {\n      console.error('Start session error:', error);\n      this.sendError(ws, 'Failed to start session');\n    }\n  }\n\n  private async handlePauseSession(ws: WebSocket, message: WebSocketMessage) {\n    const connection = this.connections.get(ws);\n    if (!connection || !connection.isHost) {\n      this.sendError(ws, 'Unauthorized');\n      return;\n    }\n\n    try {\n      await storage.updateSession(connection.sessionId, {\n        status: 'paused'\n      });\n\n      this.broadcastToSession(connection.sessionId, {\n        type: 'session_paused',\n        data: {}\n      });\n\n    } catch (error) {\n      console.error('Pause session error:', error);\n      this.sendError(ws, 'Failed to pause session');\n    }\n  }\n\n  private async handleEndSession(ws: WebSocket, message: WebSocketMessage) {\n    const connection = this.connections.get(ws);\n    if (!connection || !connection.isHost) {\n      this.sendError(ws, 'Unauthorized');\n      return;\n    }\n\n    try {\n      await storage.updateSession(connection.sessionId, {\n        status: 'completed',\n        completedAt: new Date()\n      });\n\n      this.broadcastToSession(connection.sessionId, {\n        type: 'session_ended',\n        data: {}\n      });\n\n      // Clean up connections\n      this.cleanupSession(connection.sessionId);\n\n    } catch (error) {\n      console.error('End session error:', error);\n      this.sendError(ws, 'Failed to end session');\n    }\n  }\n\n  private handleDisconnection(ws: WebSocket) {\n    const connection = this.connections.get(ws);\n    if (connection) {\n      // Remove from session connections\n      const sessionConnections = this.sessionConnections.get(connection.sessionId);\n      if (sessionConnections) {\n        sessionConnections.delete(ws);\n        \n        // If participant disconnected, notify others\n        if (!connection.isHost && connection.participantId) {\n          this.broadcastToSession(connection.sessionId, {\n            type: 'participant_left',\n            data: {\n              participantId: connection.participantId\n            }\n          });\n        }\n      }\n      \n      this.connections.delete(ws);\n    }\n  }\n\n  private sendMessage(ws: WebSocket, message: any) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }\n\n  private sendError(ws: WebSocket, error: string) {\n    this.sendMessage(ws, {\n      type: 'error',\n      data: { message: error }\n    });\n  }\n\n  private broadcastToSession(sessionId: string, message: any) {\n    const connections = this.sessionConnections.get(sessionId);\n    if (connections) {\n      connections.forEach(ws => {\n        this.sendMessage(ws, message);\n      });\n    }\n  }\n\n  private broadcastToSessionHosts(sessionId: string, message: any) {\n    const connections = this.sessionConnections.get(sessionId);\n    if (connections) {\n      connections.forEach(ws => {\n        const connection = this.connections.get(ws);\n        if (connection && connection.isHost) {\n          this.sendMessage(ws, message);\n        }\n      });\n    }\n  }\n\n  private async getResponseCount(sessionId: string, questionIndex: number): Promise<number> {\n    const responses = await storage.getResponsesBySession(sessionId);\n    return responses.filter(r => r.questionIndex === questionIndex).length;\n  }\n\n  private cleanupSession(sessionId: string) {\n    const connections = this.sessionConnections.get(sessionId);\n    if (connections) {\n      connections.forEach(ws => {\n        this.connections.delete(ws);\n      });\n      this.sessionConnections.delete(sessionId);\n    }\n  }\n}\n\nexport const webSocketManager = new WebSocketManager();\n","size_bytes":13327},"client/src/components/confetti.tsx":{"content":"import { useEffect, useState } from \"react\";\n\ninterface ConfettiProps {\n  active: boolean;\n  onComplete?: () => void;\n}\n\ninterface ConfettiPiece {\n  id: number;\n  left: number;\n  delay: number;\n  duration: number;\n  color: string;\n}\n\nconst colors = [\n  \"hsl(262, 83%, 58%)\", // primary\n  \"hsl(25, 95%, 53%)\",  // accent\n  \"hsl(142, 76%, 36%)\", // success\n  \"hsl(38, 92%, 50%)\"   // warning\n];\n\nexport function Confetti({ active, onComplete }: ConfettiProps) {\n  const [pieces, setPieces] = useState<ConfettiPiece[]>([]);\n\n  useEffect(() => {\n    if (!active) {\n      setPieces([]);\n      return;\n    }\n\n    const newPieces: ConfettiPiece[] = [];\n    \n    for (let i = 0; i < 50; i++) {\n      newPieces.push({\n        id: i,\n        left: Math.random() * 100,\n        delay: Math.random() * 2,\n        duration: Math.random() * 2 + 1,\n        color: colors[Math.floor(Math.random() * colors.length)]\n      });\n    }\n\n    setPieces(newPieces);\n\n    // Clean up after animation\n    const timeout = setTimeout(() => {\n      setPieces([]);\n      onComplete?.();\n    }, 3000);\n\n    return () => clearTimeout(timeout);\n  }, [active, onComplete]);\n\n  if (!active || pieces.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none z-50\">\n      {pieces.map((piece) => (\n        <div\n          key={piece.id}\n          className=\"confetti-piece absolute\"\n          style={{\n            left: `${piece.left}vw`,\n            backgroundColor: piece.color,\n            animationDelay: `${piece.delay}s`,\n            animationDuration: `${piece.duration}s`\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n","size_bytes":1639},"client/src/components/mobile-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { t } from \"@/lib/i18n\";\nimport { Home, Sparkles, Play, Users, BarChart3 } from \"lucide-react\";\n\nexport function MobileNav() {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-card border-t border-border md:hidden z-40\">\n      <div className=\"grid grid-cols-5 gap-1\">\n        <MobileNavItem\n          href=\"/\"\n          icon={<Home className=\"h-5 w-5\" />}\n          label=\"Home\"\n          active={location === \"/\"}\n        />\n        <MobileNavItem\n          href=\"/ai-builder\"\n          icon={<Sparkles className=\"h-5 w-5\" />}\n          label=\"AI Build\"\n          active={location === \"/ai-builder\"}\n        />\n        <MobileNavItem\n          href=\"/host-live\"\n          icon={<Play className=\"h-5 w-5\" />}\n          label=\"Host\"\n          active={location === \"/host-live\"}\n        />\n        <MobileNavItem\n          href=\"/join\"\n          icon={<Users className=\"h-5 w-5\" />}\n          label=\"Join\"\n          active={location.startsWith(\"/join\")}\n        />\n        <MobileNavItem\n          href=\"/results\"\n          icon={<BarChart3 className=\"h-5 w-5\" />}\n          label=\"Results\"\n          active={location === \"/results\"}\n        />\n      </div>\n    </nav>\n  );\n}\n\ninterface MobileNavItemProps {\n  href: string;\n  icon: React.ReactNode;\n  label: string;\n  active: boolean;\n}\n\nfunction MobileNavItem({ href, icon, label, active }: MobileNavItemProps) {\n  return (\n    <Link href={href}>\n      <button\n        className={`flex flex-col items-center justify-center p-3 text-xs transition-colors ${\n          active ? \"text-primary\" : \"text-muted-foreground\"\n        }`}\n        data-testid={`mobile-nav-${href.replace(\"/\", \"\") || \"dashboard\"}`}\n      >\n        <div className=\"mb-1\">{icon}</div>\n        <span>{label}</span>\n      </button>\n    </Link>\n  );\n}\n","size_bytes":1870},"client/src/components/navigation.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { useThemeContext } from \"@/components/theme-provider\";\nimport { t, getCurrentLanguage, setLanguage } from \"@/lib/i18n\";\nimport { Brain, Palette, Globe, User } from \"lucide-react\";\n\nexport function Navigation() {\n  const { theme, toggleTheme } = useThemeContext();\n  const currentLang = getCurrentLanguage();\n\n  const toggleLanguage = () => {\n    const newLang = currentLang === \"en\" ? \"hi\" : \"en\";\n    setLanguage(newLang);\n    window.location.reload(); // Reload to apply language changes\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 bg-card border-b border-border shadow-sm\">\n      <div className=\"container mx-auto px-4 py-3 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          {/* Mobile Sidebar Toggle */}\n          <SidebarTrigger className=\"md:hidden\" data-testid=\"button-sidebar-toggle\" />\n          \n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"gradient-primary p-2 rounded-lg\">\n                <Brain className=\"text-primary-foreground h-6 w-6\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-foreground\">{t(\"header.title\")}</h1>\n            </div>\n          </Link>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          {/* Language Toggle */}\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={toggleLanguage}\n            className=\"touch-target\"\n            data-testid=\"button-language-toggle\"\n          >\n            <Globe className=\"h-4 w-4 mr-1\" />\n            {currentLang === \"en\" ? \"EN\" : \"हि\"}\n          </Button>\n          \n          {/* Theme Toggle */}\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={toggleTheme}\n            className=\"touch-target\"\n            data-testid=\"button-theme-toggle\"\n          >\n            <Palette className=\"h-4 w-4\" />\n          </Button>\n          \n          {/* User Menu */}\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            className=\"touch-target\"\n            data-testid=\"button-user-menu\"\n          >\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                <User className=\"h-4 w-4 text-primary-foreground\" />\n              </div>\n              <span className=\"hidden sm:block text-sm font-medium\">User</span>\n            </div>\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2742},"client/src/components/qr-code.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { generateQR } from \"@/lib/qr-generator\";\n\ninterface QRCodeProps {\n  value: string;\n  size?: number;\n  className?: string;\n}\n\nexport function QRCode({ value, size = 200, className = \"\" }: QRCodeProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      generateQR(value, canvasRef.current, size);\n    }\n  }, [value, size]);\n\n  return (\n    <div className={`inline-block ${className}`}>\n      <canvas\n        ref={canvasRef}\n        width={size}\n        height={size}\n        className=\"border rounded-lg\"\n        data-testid=\"qr-code\"\n      />\n    </div>\n  );\n}\n","size_bytes":671},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useState } from \"react\";\nimport { \n  Home, \n  Sparkles, \n  Play, \n  Users, \n  BarChart3,\n  FileText, \n  Heart, \n  Share2,\n  Settings, \n  HelpCircle,\n  Globe,\n  Palette,\n  ChevronDown,\n  ChevronRight,\n  Brain,\n  User\n} from \"lucide-react\";\n\nimport { t, getCurrentLanguage, setLanguage } from \"@/lib/i18n\";\nimport { useThemeContext } from \"@/components/theme-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  Sidebar as SidebarPrimitive,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarGroupContent,\n  SidebarMenu,\n  SidebarMenuItem,\n  SidebarMenuButton,\n  SidebarSeparator,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\n\ninterface NavigationItem {\n  title: string;\n  href: string;\n  icon: React.ComponentType<{ className?: string }>;\n  testId: string;\n}\n\nconst primaryNavItems: NavigationItem[] = [\n  {\n    title: t(\"nav.dashboard\"),\n    href: \"/\",\n    icon: Home,\n    testId: \"nav-dashboard\",\n  },\n  {\n    title: t(\"nav.ai_builder\"),\n    href: \"/ai-builder\",\n    icon: Sparkles,\n    testId: \"nav-ai-builder\",\n  },\n  {\n    title: \"Host Live\",\n    href: \"/host-live\",\n    icon: Play,\n    testId: \"nav-host-live\",\n  },\n  {\n    title: \"Join Quiz\",\n    href: \"/join\",\n    icon: Users,\n    testId: \"nav-join-quiz\",\n  },\n  {\n    title: \"Analytics\",\n    href: \"/results\",\n    icon: BarChart3,\n    testId: \"nav-analytics\",\n  },\n];\n\nconst contentNavItems: NavigationItem[] = [\n  {\n    title: \"My Quizzes\",\n    href: \"/my-quizzes\",\n    icon: FileText,\n    testId: \"nav-my-quizzes\",\n  },\n  {\n    title: \"Favorites\",\n    href: \"/favorites\",\n    icon: Heart,\n    testId: \"nav-favorites\",\n  },\n  {\n    title: \"Shared\",\n    href: \"/shared\",\n    icon: Share2,\n    testId: \"nav-shared\",\n  },\n];\n\nconst systemNavItems: NavigationItem[] = [\n  {\n    title: \"Settings\",\n    href: \"/settings\",\n    icon: Settings,\n    testId: \"nav-settings\",\n  },\n  {\n    title: \"Help\",\n    href: \"/help\",\n    icon: HelpCircle,\n    testId: \"nav-help\",\n  },\n];\n\nexport function QuriousSidebar() {\n  const [location] = useLocation();\n  const { theme, toggleTheme } = useThemeContext();\n  const currentLang = getCurrentLanguage();\n  const { isMobile, setOpenMobile } = useSidebar();\n\n  const [contentExpanded, setContentExpanded] = useState(true);\n  const [systemExpanded, setSystemExpanded] = useState(true);\n\n  const toggleLanguage = () => {\n    const newLang = currentLang === \"en\" ? \"hi\" : \"en\";\n    setLanguage(newLang);\n    window.location.reload(); // Reload to apply language changes\n  };\n\n  const isActive = (href: string) => {\n    if (href === \"/\") {\n      return location === \"/\";\n    }\n    return location.startsWith(href);\n  };\n\n  // Auto-close mobile drawer after navigation\n  const handleNavigationClick = () => {\n    if (isMobile) {\n      setOpenMobile(false);\n    }\n  };\n\n  return (\n    <SidebarPrimitive \n      className=\"border-r bg-white shadow-sm\" \n      data-testid=\"sidebar-main\"\n      style={{ backgroundColor: '#ffffff', borderRight: '1px solid #e2e8f0' }}\n    >\n      <SidebarHeader className=\"border-b\">\n        <Link \n          href=\"/\" \n          data-testid=\"link-branding\"\n          className=\"focus:outline-none focus:ring-2 focus:ring-primary rounded-lg\"\n        >\n          <div className=\"flex items-center space-x-3 px-2 py-2\">\n            <div className=\"gradient-primary p-2 rounded-lg\">\n              <Brain className=\"text-primary-foreground h-6 w-6\" />\n            </div>\n            <div className=\"flex flex-col\">\n              <h1 className=\"text-lg font-bold text-foreground group-data-[collapsible=icon]:hidden\">\n                {t(\"header.title\")}\n              </h1>\n              <p className=\"text-xs text-muted-foreground group-data-[collapsible=icon]:hidden\">\n                Quiz Platform\n              </p>\n            </div>\n          </div>\n        </Link>\n      </SidebarHeader>\n\n      <SidebarContent>\n        {/* Primary Navigation */}\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {primaryNavItems.map((item) => (\n                <SidebarMenuItem key={item.href}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={isActive(item.href)}\n                    tooltip={item.title}\n                    data-testid={item.testId}\n                    className=\"touch-target min-h-[44px]\"\n                  >\n                    <Link href={item.href} onClick={handleNavigationClick}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarSeparator />\n\n        {/* Content Management */}\n        <Collapsible \n          open={contentExpanded} \n          onOpenChange={setContentExpanded}\n          className=\"group/collapsible\"\n        >\n          <SidebarGroup>\n            <SidebarGroupLabel asChild>\n              <CollapsibleTrigger \n                className=\"flex w-full items-center justify-between hover:bg-sidebar-accent hover:text-sidebar-accent-foreground rounded-md p-2 transition-colors focus:outline-none focus:ring-2 focus:ring-primary touch-target min-h-[44px]\"\n                data-testid=\"toggle-content-section\"\n                aria-label=\"Toggle content management section\"\n                tabIndex={0}\n              >\n                <span>Content Management</span>\n                {contentExpanded ? (\n                  <ChevronDown className=\"h-4 w-4\" />\n                ) : (\n                  <ChevronRight className=\"h-4 w-4\" />\n                )}\n              </CollapsibleTrigger>\n            </SidebarGroupLabel>\n            <CollapsibleContent>\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  {contentNavItems.map((item) => (\n                    <SidebarMenuItem key={item.href}>\n                      <SidebarMenuButton\n                        asChild\n                        isActive={isActive(item.href)}\n                        tooltip={item.title}\n                        data-testid={item.testId}\n                        className=\"touch-target min-h-[44px]\"\n                      >\n                        <Link href={item.href} onClick={handleNavigationClick}>\n                          <item.icon className=\"h-4 w-4\" />\n                          <span>{item.title}</span>\n                        </Link>\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  ))}\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </CollapsibleContent>\n          </SidebarGroup>\n        </Collapsible>\n\n        <SidebarSeparator />\n\n        {/* System */}\n        <Collapsible \n          open={systemExpanded} \n          onOpenChange={setSystemExpanded}\n          className=\"group/collapsible\"\n        >\n          <SidebarGroup>\n            <SidebarGroupLabel asChild>\n              <CollapsibleTrigger \n                className=\"flex w-full items-center justify-between hover:bg-sidebar-accent hover:text-sidebar-accent-foreground rounded-md p-2 transition-colors focus:outline-none focus:ring-2 focus:ring-primary touch-target min-h-[44px]\"\n                data-testid=\"toggle-system-section\"\n                aria-label=\"Toggle system section\"\n                tabIndex={0}\n              >\n                <span>System</span>\n                {systemExpanded ? (\n                  <ChevronDown className=\"h-4 w-4\" />\n                ) : (\n                  <ChevronRight className=\"h-4 w-4\" />\n                )}\n              </CollapsibleTrigger>\n            </SidebarGroupLabel>\n            <CollapsibleContent>\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  {systemNavItems.map((item) => (\n                    <SidebarMenuItem key={item.href}>\n                      <SidebarMenuButton\n                        asChild\n                        isActive={isActive(item.href)}\n                        tooltip={item.title}\n                        data-testid={item.testId}\n                        className=\"touch-target min-h-[44px]\"\n                      >\n                        <Link href={item.href} onClick={handleNavigationClick}>\n                          <item.icon className=\"h-4 w-4\" />\n                          <span>{item.title}</span>\n                        </Link>\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  ))}\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </CollapsibleContent>\n          </SidebarGroup>\n        </Collapsible>\n      </SidebarContent>\n\n      <SidebarFooter className=\"border-t\">\n        {/* User Controls */}\n        <SidebarMenu>\n          {/* Language Toggle */}\n          <SidebarMenuItem>\n            <SidebarMenuButton\n              onClick={toggleLanguage}\n              tooltip={`Switch to ${currentLang === \"en\" ? \"Hindi\" : \"English\"}`}\n              data-testid=\"button-language-toggle\"\n              aria-label={`Switch to ${currentLang === \"en\" ? \"Hindi\" : \"English\"}`}\n              className=\"touch-target min-h-[44px]\"\n            >\n              <Globe className=\"h-4 w-4\" />\n              <span className=\"group-data-[collapsible=icon]:hidden\">\n                {currentLang === \"en\" ? \"English\" : \"हिन्दी\"}\n              </span>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n\n          {/* Theme Toggle */}\n          <SidebarMenuItem>\n            <SidebarMenuButton\n              onClick={toggleTheme}\n              tooltip={`Switch to ${theme === \"playful\" ? \"minimal\" : \"playful\"} theme`}\n              data-testid=\"button-theme-toggle\"\n              aria-label={`Switch to ${theme === \"playful\" ? \"minimal\" : \"playful\"} theme`}\n              className=\"touch-target min-h-[44px]\"\n            >\n              <Palette className=\"h-4 w-4\" />\n              <span className=\"group-data-[collapsible=icon]:hidden\">\n                {theme === \"playful\" ? \"Playful\" : \"Minimal\"}\n              </span>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n\n          {/* User Profile */}\n          <SidebarMenuItem>\n            <SidebarMenuButton\n              asChild\n              tooltip=\"User Profile\"\n              data-testid=\"button-user-profile\"\n              className=\"touch-target min-h-[44px]\"\n            >\n              <Link href=\"/profile\" onClick={handleNavigationClick}>\n                <div className=\"flex items-center space-x-2\">\n                  <Avatar className=\"h-6 w-6\">\n                    <AvatarFallback className=\"bg-primary text-primary-foreground text-xs\">\n                      <User className=\"h-3 w-3\" />\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex flex-col group-data-[collapsible=icon]:hidden\">\n                    <span className=\"text-sm font-medium\">User</span>\n                    <span className=\"text-xs text-muted-foreground\">user@example.com</span>\n                  </div>\n                </div>\n              </Link>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </SidebarPrimitive>\n  );\n}","size_bytes":11637},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, ReactNode } from \"react\";\nimport { useTheme, Theme } from \"@/hooks/use-theme\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n  isPlayful: boolean;\n  isMinimal: boolean;\n}\n\nconst ThemeContext = createContext<ThemeContextType | null>(null);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const themeData = useTheme();\n\n  return (\n    <ThemeContext.Provider value={themeData}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useThemeContext() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useThemeContext must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":716},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-session.ts":{"content":"import { useState, useCallback } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useWebSocket } from \"./use-websocket\";\nimport { useToast } from \"./use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type Session, type Participant, type GameSettings } from \"@shared/schema\";\n\nexport function useSession() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [sessionId, setSessionId] = useState<string>(\"\");\n  const [participantId, setParticipantId] = useState<string>(\"\");\n  const [isHost, setIsHost] = useState(false);\n\n  const { subscribe, send, isConnected } = useWebSocket();\n\n  // Get session details\n  const { data: sessionData, isLoading } = useQuery({\n    queryKey: [\"/api/session\", sessionId],\n    queryFn: async () => {\n      if (!sessionId) return null;\n      const response = await fetch(`/api/session/${sessionId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch session\");\n      return response.json();\n    },\n    enabled: !!sessionId\n  });\n\n  const session: Session | null = sessionData?.session || null;\n\n  // Create session mutation\n  const createSessionMutation = useMutation({\n    mutationFn: async (data: {\n      quizId: string;\n      hostId: string;\n      settings: GameSettings;\n    }) => {\n      const response = await apiRequest(\"POST\", \"/api/session\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setSessionId(data.session.id);\n      setIsHost(true);\n      queryClient.invalidateQueries({ queryKey: [\"/api/session\", data.session.id] });\n      \n      if (isConnected) {\n        send({\n          type: \"host_session\",\n          data: {\n            sessionId: data.session.id,\n            userId: data.session.hostId\n          }\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Create Session\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Join session function\n  const joinSession = useCallback(async (sessionCode: string, nickname: string) => {\n    try {\n      const response = await fetch(`/api/session/code/${sessionCode}`);\n      if (!response.ok) throw new Error(\"Session not found\");\n      \n      const data = await response.json();\n      setSessionId(data.session.id);\n      setIsHost(false);\n      \n      if (isConnected) {\n        send({\n          type: \"join_session\",\n          data: { sessionCode, nickname }\n        });\n      }\n      \n      return data.session;\n    } catch (error) {\n      toast({\n        title: \"Failed to Join Session\",\n        description: error instanceof Error ? error.message : \"Unknown error\",\n        variant: \"destructive\"\n      });\n      throw error;\n    }\n  }, [send, isConnected, toast]);\n\n  // Session control functions\n  const startSession = useCallback(() => {\n    if (!sessionId || !isConnected || !isHost) return;\n    \n    send({\n      type: \"host_start_session\",\n      data: { sessionId }\n    });\n  }, [sessionId, isConnected, isHost, send]);\n\n  const pauseSession = useCallback(() => {\n    if (!sessionId || !isConnected || !isHost) return;\n    \n    send({\n      type: \"host_pause_session\", \n      data: { sessionId }\n    });\n  }, [sessionId, isConnected, isHost, send]);\n\n  const nextQuestion = useCallback((questionIndex: number) => {\n    if (!sessionId || !isConnected || !isHost) return;\n    \n    send({\n      type: \"host_next_question\",\n      data: { sessionId, questionIndex }\n    });\n  }, [sessionId, isConnected, isHost, send]);\n\n  const endSession = useCallback(() => {\n    if (!sessionId || !isConnected || !isHost) return;\n    \n    send({\n      type: \"host_end_session\",\n      data: { sessionId }\n    });\n  }, [sessionId, isConnected, isHost, send]);\n\n  const submitAnswer = useCallback((questionIndex: number, answer: string, responseTime: number) => {\n    if (!sessionId || !isConnected || isHost) return;\n    \n    send({\n      type: \"participant_answer\",\n      data: { questionIndex, answer, responseTime }\n    });\n  }, [sessionId, isConnected, isHost, send]);\n\n  return {\n    // State\n    session,\n    sessionId,\n    participantId,\n    isHost,\n    isLoading,\n    isConnected,\n    \n    // Mutations\n    createSession: createSessionMutation.mutate,\n    isCreatingSession: createSessionMutation.isPending,\n    \n    // Functions\n    joinSession,\n    startSession,\n    pauseSession,\n    nextQuestion,\n    endSession,\n    submitAnswer,\n    \n    // WebSocket utilities\n    subscribe,\n    send,\n    \n    // Setters (for manual state management if needed)\n    setSessionId,\n    setParticipantId,\n    setIsHost\n  };\n}\n","size_bytes":4633},"client/src/hooks/use-theme.ts":{"content":"import * as React from \"react\";\n\nexport type Theme = \"playful\" | \"minimal\";\n\nexport function useTheme() {\n  const [theme, setTheme] = React.useState<Theme>(\"playful\");\n\n  React.useEffect(() => {\n    // Load theme from localStorage\n    const savedTheme = localStorage.getItem(\"qurious-theme\") as Theme;\n    if (savedTheme && (savedTheme === \"playful\" || savedTheme === \"minimal\")) {\n      setTheme(savedTheme);\n      if (savedTheme === \"minimal\") {\n        document.body.classList.add(\"theme-minimal\");\n      }\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"playful\" ? \"minimal\" : \"playful\";\n    setTheme(newTheme);\n    localStorage.setItem(\"qurious-theme\", newTheme);\n    \n    if (newTheme === \"minimal\") {\n      document.body.classList.add(\"theme-minimal\");\n    } else {\n      document.body.classList.remove(\"theme-minimal\");\n    }\n  };\n\n  return {\n    theme,\n    toggleTheme,\n    isPlayful: theme === \"playful\",\n    isMinimal: theme === \"minimal\"\n  };\n}\n","size_bytes":988},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.ts":{"content":"import { useEffect, useRef, useCallback } from \"react\";\nimport { wsClient } from \"@/lib/websocket\";\n\ninterface UseWebSocketOptions {\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n  onError?: (error: Event) => void;\n}\n\nexport function useWebSocket(options: UseWebSocketOptions = {}) {\n  const { onConnect, onDisconnect, onError } = options;\n  const callbacksRef = useRef<Map<string, Set<(data: any) => void>>>(new Map());\n\n  useEffect(() => {\n    const connect = async () => {\n      try {\n        await wsClient.connect();\n        onConnect?.();\n      } catch (error) {\n        console.error(\"WebSocket connection failed:\", error);\n        onError?.(error as Event);\n      }\n    };\n\n    connect();\n\n    return () => {\n      // Clean up callbacks\n      callbacksRef.current.forEach((callbacks, messageType) => {\n        callbacks.forEach(callback => {\n          wsClient.off(messageType, callback);\n        });\n      });\n      callbacksRef.current.clear();\n      \n      wsClient.disconnect();\n      onDisconnect?.();\n    };\n  }, [onConnect, onDisconnect, onError]);\n\n  const subscribe = useCallback((messageType: string, callback: (data: any) => void) => {\n    wsClient.on(messageType, callback);\n    \n    // Track callback for cleanup\n    if (!callbacksRef.current.has(messageType)) {\n      callbacksRef.current.set(messageType, new Set());\n    }\n    callbacksRef.current.get(messageType)!.add(callback);\n\n    return () => {\n      wsClient.off(messageType, callback);\n      \n      const callbacks = callbacksRef.current.get(messageType);\n      if (callbacks) {\n        callbacks.delete(callback);\n        if (callbacks.size === 0) {\n          callbacksRef.current.delete(messageType);\n        }\n      }\n    };\n  }, []);\n\n  const send = useCallback((message: any) => {\n    wsClient.send(message);\n  }, []);\n\n  const isConnected = wsClient.isConnected;\n\n  return {\n    subscribe,\n    send,\n    isConnected\n  };\n}\n","size_bytes":1919},"client/src/lib/i18n.ts":{"content":"interface Translations {\n  [key: string]: {\n    [key: string]: string;\n  };\n}\n\nconst translations: Translations = {\n  en: {\n    // Header\n    \"header.title\": \"Qurious\",\n    \"header.language\": \"EN\",\n    \n    // Navigation\n    \"nav.dashboard\": \"Dashboard\",\n    \"nav.ai_builder\": \"AI Quiz Builder\",\n    \"nav.host_live\": \"Host Live\",\n    \"nav.join_quiz\": \"Join Quiz\",\n    \"nav.results\": \"Analytics\",\n    \n    // Dashboard\n    \"dashboard.welcome\": \"Welcome back\",\n    \"dashboard.subtitle\": \"Ready to create engaging quizzes for your team?\",\n    \"dashboard.total_quizzes\": \"Total Quizzes\",\n    \"dashboard.players_month\": \"Players This Month\",\n    \"dashboard.avg_score\": \"Avg. Score\",\n    \"dashboard.best_streak\": \"Best Streak\",\n    \"dashboard.create_ai\": \"Create with AI\",\n    \"dashboard.create_ai_desc\": \"Upload docs or paste content to generate questions instantly\",\n    \"dashboard.host_live\": \"Host Live Quiz\",\n    \"dashboard.host_live_desc\": \"Start a real-time quiz session for your audience\",\n    \"dashboard.create_manual\": \"Create Manually\",\n    \"dashboard.create_manual_desc\": \"Build your quiz question by question\",\n    \"dashboard.recent_quizzes\": \"Recent Quizzes\",\n    \"dashboard.view_all\": \"View All\",\n    \n    // AI Builder\n    \"ai_builder.title\": \"AI Quiz Builder\",\n    \"ai_builder.subtitle\": \"Generate quiz questions from your content using AI\",\n    \"ai_builder.content_source\": \"Choose Your Content Source\",\n    \"ai_builder.upload_document\": \"Upload Document\",\n    \"ai_builder.upload_desc\": \"PDF, Word, PowerPoint\",\n    \"ai_builder.web_url\": \"Web URL\",\n    \"ai_builder.url_desc\": \"Article, Wikipedia, Blog\",\n    \"ai_builder.paste_text\": \"Paste Text\",\n    \"ai_builder.text_desc\": \"Notes, Articles, Content\",\n    \"ai_builder.generation_settings\": \"Generation Settings\",\n    \"ai_builder.question_types\": \"Question Types\",\n    \"ai_builder.multiple_choice\": \"Multiple Choice\",\n    \"ai_builder.true_false\": \"True/False\",\n    \"ai_builder.short_answer\": \"Short Answer\",\n    \"ai_builder.poll_questions\": \"Poll Questions\",\n    \"ai_builder.num_questions\": \"Number of Questions\",\n    \"ai_builder.difficulty\": \"Difficulty Level\",\n    \"ai_builder.generate\": \"Generate Quiz Questions\",\n    \"ai_builder.generating\": \"Generating Questions...\",\n    \n    // Host Live\n    \"host.title\": \"Host Live Quiz\",\n    \"host.subtitle\": \"Set up your live quiz session\",\n    \"host.select_quiz\": \"Select Quiz\",\n    \"host.game_settings\": \"Game Settings\",\n    \"host.game_mode\": \"Game Mode\",\n    \"host.speed_mode\": \"Speed Mode (Classic)\",\n    \"host.accuracy_mode\": \"Accuracy Mode\",\n    \"host.team_mode\": \"Team Mode\",\n    \"host.time_per_question\": \"Time per Question\",\n    \"host.features\": \"Features\",\n    \"host.streak_bonuses\": \"Streak bonuses\",\n    \"host.confetti\": \"Confetti celebrations\",\n    \"host.sound_effects\": \"Sound effects\",\n    \"host.show_answers\": \"Show answers after each question\",\n    \"host.create_session\": \"Create Live Session\",\n    \"host.session_details\": \"Session Details\",\n    \"host.join_code\": \"Join Code\",\n    \"host.participants\": \"Participants\",\n    \"host.start_quiz\": \"Start Quiz\",\n    \"host.pause_session\": \"Pause Session\",\n    \"host.end_session\": \"End Session\",\n    \n    // Join Quiz\n    \"join.title\": \"Join Quiz\",\n    \"join.subtitle\": \"Enter your quiz code to get started\",\n    \"join.enter_code\": \"Enter quiz code (e.g., ABC123)\",\n    \"join.nickname\": \"Your nickname\",\n    \"join.join_button\": \"Join Quiz\",\n    \"join.scan_qr\": \"Scan QR Code\",\n    \"join.youre_in\": \"You're In!\",\n    \"join.waiting\": \"Waiting for the quiz to start...\",\n    \"join.other_players\": \"Other Players\",\n    \n    // Results\n    \"results.title\": \"Quiz Analytics\",\n    \"results.subtitle\": \"Detailed insights from your quiz sessions\",\n    \"results.recent_sessions\": \"Recent Sessions\",\n    \"results.export_csv\": \"Export CSV\",\n    \"results.performance_overview\": \"Performance Overview\",\n    \"results.total_sessions\": \"Total Sessions\",\n    \"results.total_players\": \"Total Players\",\n    \"results.completion_rate\": \"Completion Rate\",\n    \"results.avg_session_time\": \"Avg. Session Time\",\n    \"results.top_performers\": \"Top Performers\",\n    \"results.question_performance\": \"Question Performance\",\n    \n    // Common\n    \"common.loading\": \"Loading...\",\n    \"common.error\": \"Error\",\n    \"common.success\": \"Success\",\n    \"common.cancel\": \"Cancel\",\n    \"common.save\": \"Save\",\n    \"common.edit\": \"Edit\",\n    \"common.delete\": \"Delete\",\n    \"common.create\": \"Create\",\n    \"common.back\": \"Back\",\n    \"common.next\": \"Next\",\n    \"common.previous\": \"Previous\",\n    \"common.close\": \"Close\",\n  },\n  hi: {\n    // Header\n    \"header.title\": \"क्यूरियस\",\n    \"header.language\": \"हि\",\n    \n    // Navigation\n    \"nav.dashboard\": \"डैशबोर्ड\",\n    \"nav.ai_builder\": \"AI क्विज़ बिल्डर\",\n    \"nav.host_live\": \"लाइव होस्ट\",\n    \"nav.join_quiz\": \"क्विज़ जॉइन करें\",\n    \"nav.results\": \"परिणाम\",\n    \n    // Dashboard\n    \"dashboard.welcome\": \"वापसी पर स्वागत\",\n    \"dashboard.subtitle\": \"अपनी टीम के लिए आकर्षक क्विज़ बनाने के लिए तैयार हैं?\",\n    \"dashboard.total_quizzes\": \"कुल क्विज़\",\n    \"dashboard.players_month\": \"इस महीने खिलाड़ी\",\n    \"dashboard.avg_score\": \"औसत स्कोर\",\n    \"dashboard.best_streak\": \"सर्वश्रेष्ठ स्ट्रीक\",\n    \"dashboard.create_ai\": \"AI के साथ बनाएं\",\n    \"dashboard.create_ai_desc\": \"तुरंत प्रश्न जेनरेट करने के लिए दस्तावेज़ अपलोड करें या सामग्री पेस्ट करें\",\n    \"dashboard.host_live\": \"लाइव क्विज़ होस्ट करें\",\n    \"dashboard.host_live_desc\": \"अपने दर्शकों के लिए रियल-टाइम क्विज़ सत्र शुरू करें\",\n    \"dashboard.create_manual\": \"मैन्युअल रूप से बनाएं\",\n    \"dashboard.create_manual_desc\": \"अपना क्विज़ प्रश्न दर प्रश्न बनाएं\",\n    \"dashboard.recent_quizzes\": \"हाल की क्विज़\",\n    \"dashboard.view_all\": \"सभी देखें\",\n    \n    // Common\n    \"common.loading\": \"लोड हो रहा है...\",\n    \"common.error\": \"त्रुटि\",\n    \"common.success\": \"सफलता\",\n    \"common.cancel\": \"रद्द करें\",\n    \"common.save\": \"सेव करें\",\n    \"common.edit\": \"संपादित करें\",\n    \"common.delete\": \"हटाएं\",\n    \"common.create\": \"बनाएं\",\n    \"common.back\": \"वापस\",\n    \"common.next\": \"अगला\",\n    \"common.previous\": \"पिछला\",\n    \"common.close\": \"बंद करें\",\n  }\n};\n\nlet currentLanguage = \"en\";\n\nexport function setLanguage(lang: \"en\" | \"hi\") {\n  currentLanguage = lang;\n  localStorage.setItem(\"qurious-language\", lang);\n}\n\nexport function getCurrentLanguage(): \"en\" | \"hi\" {\n  return currentLanguage as \"en\" | \"hi\";\n}\n\nexport function initializeLanguage() {\n  const saved = localStorage.getItem(\"qurious-language\");\n  if (saved && (saved === \"en\" || saved === \"hi\")) {\n    currentLanguage = saved;\n  }\n}\n\nexport function t(key: string, fallback?: string): string {\n  const translation = translations[currentLanguage]?.[key];\n  return translation || fallback || key;\n}\n\n// Initialize language on module load\nif (typeof window !== \"undefined\") {\n  initializeLanguage();\n}\n","size_bytes":7672},"client/src/lib/qr-generator.ts":{"content":"// Simple QR code generation without external dependencies\n// In a production app, you might want to use a library like 'qrcode' or 'qr-code-generator'\n\nexport function generateQR(text: string, canvas: HTMLCanvasElement, size: number = 200) {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n\n  // Clear canvas\n  ctx.fillStyle = '#ffffff';\n  ctx.fillRect(0, 0, size, size);\n\n  // For now, create a simple pattern that represents a QR code\n  // In production, you'd use a proper QR code library\n  const moduleCount = 21; // Standard QR code size\n  const moduleSize = Math.floor(size / moduleCount);\n  \n  ctx.fillStyle = '#000000';\n  \n  // Create a simple pattern based on the text\n  const pattern = createPattern(text, moduleCount);\n  \n  for (let row = 0; row < moduleCount; row++) {\n    for (let col = 0; col < moduleCount; col++) {\n      if (pattern[row][col]) {\n        ctx.fillRect(\n          col * moduleSize,\n          row * moduleSize,\n          moduleSize,\n          moduleSize\n        );\n      }\n    }\n  }\n  \n  // Add finder patterns (corners)\n  drawFinderPattern(ctx, 0, 0, moduleSize);\n  drawFinderPattern(ctx, (moduleCount - 7) * moduleSize, 0, moduleSize);\n  drawFinderPattern(ctx, 0, (moduleCount - 7) * moduleSize, moduleSize);\n}\n\nfunction createPattern(text: string, size: number): boolean[][] {\n  const pattern: boolean[][] = Array(size).fill(null).map(() => Array(size).fill(false));\n  \n  // Create a deterministic pattern based on the text\n  let hash = 0;\n  for (let i = 0; i < text.length; i++) {\n    hash = ((hash << 5) - hash + text.charCodeAt(i)) & 0xffffffff;\n  }\n  \n  // Fill pattern based on hash\n  for (let row = 1; row < size - 1; row++) {\n    for (let col = 1; col < size - 1; col++) {\n      // Skip finder pattern areas\n      if ((row < 9 && col < 9) || \n          (row < 9 && col > size - 9) || \n          (row > size - 9 && col < 9)) {\n        continue;\n      }\n      \n      const index = row * size + col;\n      pattern[row][col] = ((hash >> (index % 32)) & 1) === 1;\n    }\n  }\n  \n  return pattern;\n}\n\nfunction drawFinderPattern(ctx: CanvasRenderingContext2D, x: number, y: number, moduleSize: number) {\n  // Draw the 7x7 finder pattern\n  ctx.fillStyle = '#000000';\n  \n  // Outer border\n  ctx.fillRect(x, y, 7 * moduleSize, 7 * moduleSize);\n  \n  // Inner white area\n  ctx.fillStyle = '#ffffff';\n  ctx.fillRect(x + moduleSize, y + moduleSize, 5 * moduleSize, 5 * moduleSize);\n  \n  // Center black square\n  ctx.fillStyle = '#000000';\n  ctx.fillRect(x + 2 * moduleSize, y + 2 * moduleSize, 3 * moduleSize, 3 * moduleSize);\n}\n","size_bytes":2564},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket.ts":{"content":"interface WebSocketMessage {\n  type: string;\n  sessionId?: string;\n  participantId?: string;\n  data?: any;\n}\n\nexport class WebSocketClient {\n  private ws: WebSocket | null = null;\n  private reconnectTimer: NodeJS.Timeout | null = null;\n  private isConnecting = false;\n  private callbacks = new Map<string, Set<(data: any) => void>>();\n\n  connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.ws?.readyState === WebSocket.OPEN) {\n        resolve();\n        return;\n      }\n\n      if (this.isConnecting) {\n        reject(new Error(\"Already connecting\"));\n        return;\n      }\n\n      this.isConnecting = true;\n\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      try {\n        this.ws = new WebSocket(wsUrl);\n\n        this.ws.onopen = () => {\n          console.log(\"WebSocket connected\");\n          this.isConnecting = false;\n          if (this.reconnectTimer) {\n            clearTimeout(this.reconnectTimer);\n            this.reconnectTimer = null;\n          }\n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          try {\n            const message: WebSocketMessage = JSON.parse(event.data);\n            this.handleMessage(message);\n          } catch (error) {\n            console.error(\"Failed to parse WebSocket message:\", error);\n          }\n        };\n\n        this.ws.onclose = () => {\n          console.log(\"WebSocket disconnected\");\n          this.isConnecting = false;\n          this.scheduleReconnect();\n        };\n\n        this.ws.onerror = (error) => {\n          console.error(\"WebSocket error:\", error);\n          this.isConnecting = false;\n          reject(error);\n        };\n      } catch (error) {\n        this.isConnecting = false;\n        reject(error);\n      }\n    });\n  }\n\n  disconnect() {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    \n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  send(message: WebSocketMessage) {\n    if (this.ws?.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn(\"WebSocket not connected, message not sent:\", message);\n    }\n  }\n\n  on(messageType: string, callback: (data: any) => void) {\n    if (!this.callbacks.has(messageType)) {\n      this.callbacks.set(messageType, new Set());\n    }\n    this.callbacks.get(messageType)!.add(callback);\n  }\n\n  off(messageType: string, callback: (data: any) => void) {\n    const callbacks = this.callbacks.get(messageType);\n    if (callbacks) {\n      callbacks.delete(callback);\n      if (callbacks.size === 0) {\n        this.callbacks.delete(messageType);\n      }\n    }\n  }\n\n  private handleMessage(message: WebSocketMessage) {\n    const callbacks = this.callbacks.get(message.type);\n    if (callbacks) {\n      callbacks.forEach(callback => {\n        try {\n          callback(message.data);\n        } catch (error) {\n          console.error(\"Error in WebSocket callback:\", error);\n        }\n      });\n    }\n  }\n\n  private scheduleReconnect() {\n    if (this.reconnectTimer) return;\n    \n    this.reconnectTimer = setTimeout(() => {\n      console.log(\"Attempting to reconnect WebSocket...\");\n      this.connect().catch(error => {\n        console.error(\"Reconnect failed:\", error);\n        this.scheduleReconnect();\n      });\n    }, 3000);\n  }\n\n  get isConnected(): boolean {\n    return this.ws?.readyState === WebSocket.OPEN;\n  }\n}\n\nexport const wsClient = new WebSocketClient();\n","size_bytes":3584},"client/src/pages/ai-builder.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { t } from \"@/lib/i18n\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Upload, Link as LinkIcon, Edit, Sparkles, Loader2, Check, X, Save } from \"lucide-react\";\n\ntype ContentSource = \"upload\" | \"url\" | \"text\";\n\ninterface GenerationOptions {\n  questionTypes: string[];\n  questionCount: number;\n  difficulty: \"easy\" | \"medium\" | \"hard\" | \"mixed\";\n  language: string;\n}\n\ninterface GeneratedQuestion {\n  id?: string;\n  question: string;\n  type: \"mcq\" | \"true_false\" | \"short_answer\" | \"poll\";\n  options?: string[];\n  correctAnswer: string;\n  explanation?: string;\n  difficulty: \"easy\" | \"medium\" | \"hard\";\n  source?: string;\n  category?: string;\n}\n\nexport default function AIBuilder() {\n  const { toast } = useToast();\n  const [contentSource, setContentSource] = useState<ContentSource>(\"upload\");\n  const [content, setContent] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [options, setOptions] = useState<GenerationOptions>({\n    questionTypes: [\"mcq\", \"true_false\"],\n    questionCount: 15,\n    difficulty: \"mixed\",\n    language: \"en\"\n  });\n  const [generatedQuestions, setGeneratedQuestions] = useState<GeneratedQuestion[]>([]);\n  const [showGenerated, setShowGenerated] = useState(false);\n\n  const generateMutation = useMutation({\n    mutationFn: async (data: { content?: string; url?: string; options: GenerationOptions }) => {\n      const endpoint = data.url ? \"/api/ai/generate-from-url\" : \"/api/ai/generate-from-text\";\n      const payload = data.url ? { url: data.url, options: data.options } : { content: data.content, options: data.options };\n      \n      const response = await apiRequest(\"POST\", endpoint, payload);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setGeneratedQuestions(data.questions || []);\n      setShowGenerated(true);\n      toast({\n        title: \"Questions Generated\",\n        description: `Successfully generated ${data.questions?.length || 0} questions.`\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Generation Failed\",\n        description: error.message || \"Failed to generate questions. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleGenerate = () => {\n    if (contentSource === \"url\" && !url.trim()) {\n      toast({\n        title: \"URL Required\",\n        description: \"Please enter a valid URL.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (contentSource === \"text\" && !content.trim()) {\n      toast({\n        title: \"Content Required\", \n        description: \"Please paste some content to generate questions from.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (contentSource === \"upload\" && !selectedFile) {\n      toast({\n        title: \"File Required\",\n        description: \"Please select a file to upload.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (contentSource === \"upload\" && selectedFile) {\n      // For file upload, we'll read the file content as text\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const fileContent = e.target?.result as string;\n        generateMutation.mutate({ content: fileContent, options });\n      };\n      reader.onerror = () => {\n        toast({\n          title: \"File Read Error\",\n          description: \"Failed to read the uploaded file.\",\n          variant: \"destructive\"\n        });\n      };\n      reader.readAsText(selectedFile);\n    } else {\n      const payload = contentSource === \"url\" \n        ? { url: url.trim(), options }\n        : { content: content.trim(), options };\n      generateMutation.mutate(payload);\n    }\n  };\n\n  const handleQuestionTypeChange = (type: string, checked: boolean) => {\n    if (checked) {\n      setOptions(prev => ({\n        ...prev,\n        questionTypes: [...prev.questionTypes, type]\n      }));\n    } else {\n      setOptions(prev => ({\n        ...prev,\n        questionTypes: prev.questionTypes.filter(t => t !== type)\n      }));\n    }\n  };\n\n  const removeQuestion = (index: number) => {\n    setGeneratedQuestions(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleFileSelect = (files: FileList | null) => {\n    if (!files || files.length === 0) return;\n    \n    const file = files[0];\n    const allowedTypes = ['text/plain', 'text/csv', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\n    \n    if (!allowedTypes.includes(file.type) && !file.name.match(/\\.(txt|csv|pdf|doc|docx)$/i)) {\n      toast({\n        title: \"File Type Not Supported\",\n        description: \"Please upload a text file, CSV, PDF, or Word document.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    if (file.size > 10 * 1024 * 1024) { // 10MB limit\n      toast({\n        title: \"File Too Large\",\n        description: \"Please upload a file smaller than 10MB.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setSelectedFile(file);\n    toast({\n      title: \"File Selected\",\n      description: `Selected: ${file.name}`,\n    });\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n    \n    const files = e.dataTransfer.files;\n    handleFileSelect(files);\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    handleFileSelect(e.target.files);\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 max-w-4xl\">\n      <div className=\"mb-12\">\n        <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold mb-3 tracking-tight break-words text-wrap\">{t(\"ai_builder.title\")}</h1>\n        <p className=\"text-lg sm:text-xl text-muted-foreground font-medium break-words text-wrap\">{t(\"ai_builder.subtitle\")}</p>\n      </div>\n\n      {/* Content Input Section */}\n      <Card className=\"mb-8 card-elevated rounded-2xl border-0 shadow-lg\">\n        <CardHeader className=\"p-8 pb-6\">\n          <CardTitle className=\"text-2xl font-bold flex items-center gap-3\">\n            <span className=\"bg-gradient-to-r from-primary to-accent text-primary-foreground w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold\">1</span>\n            {t(\"ai_builder.content_source\")}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-8 pt-0\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 mb-8\">\n            <SourceButton\n              icon={<Upload className=\"h-6 w-6\" />}\n              title={t(\"ai_builder.upload_document\")}\n              description={t(\"ai_builder.upload_desc\")}\n              active={contentSource === \"upload\"}\n              onClick={() => setContentSource(\"upload\")}\n              testId=\"button-source-upload\"\n            />\n            <SourceButton\n              icon={<LinkIcon className=\"h-6 w-6\" />}\n              title={t(\"ai_builder.web_url\")}\n              description={t(\"ai_builder.url_desc\")}\n              active={contentSource === \"url\"}\n              onClick={() => setContentSource(\"url\")}\n              testId=\"button-source-url\"\n            />\n            <SourceButton\n              icon={<Edit className=\"h-6 w-6\" />}\n              title={t(\"ai_builder.paste_text\")}\n              description={t(\"ai_builder.text_desc\")}\n              active={contentSource === \"text\"}\n              onClick={() => setContentSource(\"text\")}\n              testId=\"button-source-text\"\n            />\n          </div>\n\n          {/* Content Interfaces */}\n          {contentSource === \"upload\" && (\n            <div \n              className={`border-2 border-dashed rounded-2xl p-10 text-center transition-all duration-300 hover:border-primary/50 ${\n                isDragOver \n                  ? \"border-primary bg-primary/10 shadow-lg\" \n                  : selectedFile \n                    ? \"border-success bg-success/5 shadow-md\" \n                    : \"border-border bg-gradient-to-br from-background to-muted/30\"\n              }`}\n              onDragOver={handleDragOver}\n              onDragLeave={handleDragLeave}\n              onDrop={handleDrop}\n            >\n              <div className={`w-16 h-16 rounded-full mx-auto mb-4 flex items-center justify-center ${\n                isDragOver \n                  ? \"bg-primary/20\" \n                  : selectedFile \n                    ? \"bg-success/20\" \n                    : \"bg-muted/50\"\n              }`}>\n                <Upload className={`h-8 w-8 ${\n                  isDragOver \n                    ? \"text-primary\" \n                    : selectedFile \n                      ? \"text-success\" \n                      : \"text-muted-foreground\"\n                }`} />\n              </div>\n              {selectedFile ? (\n                <>\n                  <p className=\"text-xl font-bold mb-2 text-success\">File Selected ✓</p>\n                  <p className=\"text-base text-muted-foreground mb-6 font-medium\">{selectedFile.name}</p>\n                  <div className=\"flex justify-center space-x-4\">\n                    <input\n                      type=\"file\"\n                      id=\"file-input\"\n                      className=\"hidden\"\n                      accept=\".txt,.csv,.pdf,.doc,.docx\"\n                      onChange={handleFileInputChange}\n                    />\n                    <Button \n                      variant=\"outline\" \n                      className=\"rounded-xl\"\n                      onClick={() => document.getElementById('file-input')?.click()}\n                      data-testid=\"button-choose-different-file\"\n                    >\n                      Choose Different File\n                    </Button>\n                    <Button \n                      variant=\"destructive\" \n                      className=\"rounded-xl\"\n                      onClick={() => setSelectedFile(null)}\n                      data-testid=\"button-remove-file\"\n                    >\n                      Remove File\n                    </Button>\n                  </div>\n                </>\n              ) : (\n                <>\n                  <p className=\"text-xl font-bold mb-2\">\n                    {isDragOver ? \"Drop your file here\" : \"Drag & drop your files here\"}\n                  </p>\n                  <p className=\"text-base text-muted-foreground mb-6\">or click to browse</p>\n                  <input\n                    type=\"file\"\n                    id=\"file-input\"\n                    className=\"hidden\"\n                    accept=\".txt,.csv,.pdf,.doc,.docx\"\n                    onChange={handleFileInputChange}\n                  />\n                  <Button \n                    className=\"btn-primary-lg rounded-xl\"\n                    onClick={() => document.getElementById('file-input')?.click()}\n                    data-testid=\"button-choose-files\"\n                  >\n                    Choose Files\n                  </Button>\n                  <p className=\"text-sm text-muted-foreground mt-4 font-medium\">\n                    Supports: TXT, CSV, PDF, DOC, DOCX (max 10MB)\n                  </p>\n                </>\n              )}\n            </div>\n          )}\n\n          {contentSource === \"url\" && (\n            <div className=\"space-y-4\">\n              <Input\n                type=\"url\"\n                placeholder=\"Enter URL (e.g., https://wikipedia.org/article...)\"\n                value={url}\n                onChange={(e) => setUrl(e.target.value)}\n                className=\"text-lg touch-target rounded-xl p-4 border-2 focus:border-primary\"\n                data-testid=\"input-url\"\n              />\n            </div>\n          )}\n\n          {contentSource === \"text\" && (\n            <Textarea\n              placeholder=\"Paste your content here...\"\n              rows={10}\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              className=\"resize-none rounded-xl border-2 focus:border-primary text-base p-4\"\n              data-testid=\"textarea-content\"\n            />\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Generation Settings */}\n      <Card className=\"mb-10 card-elevated rounded-2xl border-0 shadow-lg\">\n        <CardHeader className=\"p-8 pb-6\">\n          <CardTitle className=\"text-2xl font-bold flex items-center gap-3\">\n            <span className=\"bg-gradient-to-r from-accent to-primary text-primary-foreground w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold\">2</span>\n            {t(\"ai_builder.generation_settings\")}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-8 pt-0\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 md:gap-8\">\n            <div>\n              <Label className=\"text-sm font-medium mb-3 block\">{t(\"ai_builder.question_types\")}</Label>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"mcq\"\n                    checked={options.questionTypes.includes(\"mcq\")}\n                    onCheckedChange={(checked) => handleQuestionTypeChange(\"mcq\", checked as boolean)}\n                    data-testid=\"checkbox-mcq\"\n                  />\n                  <Label htmlFor=\"mcq\" className=\"text-sm\">{t(\"ai_builder.multiple_choice\")}</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"true_false\"\n                    checked={options.questionTypes.includes(\"true_false\")}\n                    onCheckedChange={(checked) => handleQuestionTypeChange(\"true_false\", checked as boolean)}\n                    data-testid=\"checkbox-true-false\"\n                  />\n                  <Label htmlFor=\"true_false\" className=\"text-sm\">{t(\"ai_builder.true_false\")}</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"short_answer\"\n                    checked={options.questionTypes.includes(\"short_answer\")}\n                    onCheckedChange={(checked) => handleQuestionTypeChange(\"short_answer\", checked as boolean)}\n                    data-testid=\"checkbox-short-answer\"\n                  />\n                  <Label htmlFor=\"short_answer\" className=\"text-sm\">{t(\"ai_builder.short_answer\")}</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"poll\"\n                    checked={options.questionTypes.includes(\"poll\")}\n                    onCheckedChange={(checked) => handleQuestionTypeChange(\"poll\", checked as boolean)}\n                    data-testid=\"checkbox-poll\"\n                  />\n                  <Label htmlFor=\"poll\" className=\"text-sm\">{t(\"ai_builder.poll_questions\")}</Label>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium mb-2 block\">{t(\"ai_builder.num_questions\")}</Label>\n                <Select\n                  value={options.questionCount.toString()}\n                  onValueChange={(value) => setOptions(prev => ({ ...prev, questionCount: parseInt(value) }))}\n                >\n                  <SelectTrigger className=\"touch-target\" data-testid=\"select-question-count\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"5\">5 questions</SelectItem>\n                    <SelectItem value=\"10\">10 questions</SelectItem>\n                    <SelectItem value=\"15\">15 questions</SelectItem>\n                    <SelectItem value=\"20\">20 questions</SelectItem>\n                    <SelectItem value=\"25\">25 questions</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label className=\"text-sm font-medium mb-2 block\">{t(\"ai_builder.difficulty\")}</Label>\n                <Select\n                  value={options.difficulty}\n                  onValueChange={(value: \"easy\" | \"medium\" | \"hard\" | \"mixed\") => \n                    setOptions(prev => ({ ...prev, difficulty: value }))\n                  }\n                >\n                  <SelectTrigger className=\"touch-target\" data-testid=\"select-difficulty\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"easy\">Easy</SelectItem>\n                    <SelectItem value=\"mixed\">Mixed</SelectItem>\n                    <SelectItem value=\"medium\">Intermediate</SelectItem>\n                    <SelectItem value=\"hard\">Advanced</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Generate Button */}\n      <div className=\"text-center mb-12\">\n        <Button\n          onClick={handleGenerate}\n          disabled={generateMutation.isPending || options.questionTypes.length === 0}\n          className=\"btn-primary-lg text-primary-foreground rounded-2xl hover:shadow-2xl transition-all duration-300 touch-target shadow-xl text-xl px-12 py-6\"\n          data-testid=\"button-generate\"\n        >\n          {generateMutation.isPending ? (\n            <>\n              <Loader2 className=\"h-6 w-6 mr-3 animate-spin\" />\n              {t(\"ai_builder.generating\")}\n            </>\n          ) : (\n            <>\n              <Sparkles className=\"h-6 w-6 mr-3\" />\n              {t(\"ai_builder.generate\")}\n            </>\n          )}\n        </Button>\n      </div>\n\n      {/* Generated Questions */}\n      {showGenerated && (\n        <Card className=\"card-elevated rounded-2xl border-0 shadow-lg\">\n          <CardHeader className=\"flex flex-row items-center justify-between p-8 pb-6\">\n            <CardTitle className=\"text-2xl font-bold\">Generated Questions</CardTitle>\n            <div className=\"flex items-center space-x-3\">\n              <Button variant=\"outline\" size=\"sm\" className=\"rounded-xl\" data-testid=\"button-edit-all\">\n                <Edit className=\"h-4 w-4 mr-2\" />\n                Edit All\n              </Button>\n              <Button className=\"btn-secondary-lg rounded-xl\" data-testid=\"button-save-quiz\">\n                <Save className=\"h-5 w-5 mr-2\" />\n                Save Quiz\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-8 pt-0\">\n            {generatedQuestions.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"bg-gradient-to-br from-primary/10 to-accent/10 rounded-full p-6 w-24 h-24 mx-auto mb-6 flex items-center justify-center\">\n                  <Sparkles className=\"h-12 w-12 text-primary\" />\n                </div>\n                <p className=\"text-muted-foreground text-lg\">No questions generated yet.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {generatedQuestions.map((question, index) => (\n                  <QuestionCard\n                    key={index}\n                    question={question}\n                    index={index}\n                    onRemove={() => removeQuestion(index)}\n                  />\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\ninterface SourceButtonProps {\n  icon: React.ReactNode;\n  title: string;\n  description: string;\n  active: boolean;\n  onClick: () => void;\n  testId: string;\n}\n\nfunction SourceButton({ icon, title, description, active, onClick, testId }: SourceButtonProps) {\n  return (\n    <button\n      onClick={onClick}\n      className={`p-6 rounded-2xl border-2 text-center hover:border-primary hover:shadow-md transition-all duration-300 touch-target ${\n        active\n          ? \"border-primary bg-gradient-to-br from-primary/10 to-primary/5 text-primary shadow-md\"\n          : \"border-border bg-gradient-to-br from-card to-background hover:bg-accent/5\"\n      }`}\n      data-testid={testId}\n    >\n      <div className=\"mb-4 flex justify-center\">\n        <div className={`p-3 rounded-full ${\n          active ? \"bg-primary/20\" : \"bg-muted/50\"\n        }`}>\n          {icon}\n        </div>\n      </div>\n      <p className=\"font-semibold text-lg mb-2 break-words text-wrap\">{title}</p>\n      <p className=\"text-sm text-muted-foreground leading-relaxed break-words text-wrap\">{description}</p>\n    </button>\n  );\n}\n\ninterface QuestionCardProps {\n  question: GeneratedQuestion;\n  index: number;\n  onRemove: () => void;\n}\n\nfunction QuestionCard({ question, index, onRemove }: QuestionCardProps) {\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"easy\": return \"bg-success/20 text-success\";\n      case \"medium\": return \"bg-warning/20 text-warning\";\n      case \"hard\": return \"bg-destructive/20 text-destructive\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case \"mcq\": return \"bg-primary/20 text-primary\";\n      case \"true_false\": return \"bg-accent/20 text-accent\";\n      case \"short_answer\": return \"bg-success/20 text-success\";\n      case \"poll\": return \"bg-warning/20 text-warning\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  return (\n    <div className=\"border border-border rounded-2xl p-6 hover:shadow-lg hover:border-primary/20 transition-all duration-300 bg-gradient-to-r from-background via-card to-background/50\">\n      <div className=\"flex flex-col sm:flex-row items-start justify-between mb-4 gap-4\">\n        <div className=\"flex-1 min-w-0\">\n          <h4 className=\"font-semibold text-lg mb-3 leading-relaxed break-words text-wrap\" data-testid={`question-text-${index}`}>\n            {question.question}\n          </h4>\n          <div className=\"flex flex-wrap gap-3 text-sm\">\n            <span className={`px-3 py-2 rounded-xl font-medium ${getTypeColor(question.type)}`}>\n              {question.type.replace(\"_\", \" \")}\n            </span>\n            <span className={`px-3 py-2 rounded-xl font-medium ${getDifficultyColor(question.difficulty)}`}>\n              {question.difficulty}\n            </span>\n            {question.source && (\n              <span className=\"text-muted-foreground px-3 py-2 bg-muted/50 rounded-xl\">\n                Source: {question.source}\n              </span>\n            )}\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-3 flex-shrink-0\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-primary/10 rounded-xl\" data-testid={`button-edit-${index}`}>\n            <Edit className=\"h-5 w-5\" />\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-destructive/10 rounded-xl\" onClick={onRemove} data-testid={`button-remove-${index}`}>\n            <X className=\"h-5 w-5 text-destructive\" />\n          </Button>\n        </div>\n      </div>\n      \n      {question.type === \"mcq\" && question.options && (\n        <div className=\"space-y-3 ml-6\">\n          {question.options.map((option, optIndex) => (\n            <div key={optIndex} className={`flex items-center space-x-3 p-3 rounded-xl ${\n              option === question.correctAnswer \n                ? \"bg-success/10 border border-success/20\" \n                : \"bg-muted/20\"\n            }`}>\n              <div className={`p-1 rounded-full ${\n                option === question.correctAnswer \n                  ? \"bg-success text-success-foreground\" \n                  : \"bg-muted\"\n              }`}>\n                {option === question.correctAnswer ? (\n                  <Check className=\"h-4 w-4\" />\n                ) : (\n                  <X className=\"h-4 w-4 text-muted-foreground\" />\n                )}\n              </div>\n              <span className={`font-medium break-words text-wrap ${\n                option === question.correctAnswer ? \"text-success\" : \"text-muted-foreground\"\n              }`}>\n                {option}\n              </span>\n            </div>\n          ))}\n        </div>\n      )}\n      \n      {question.type !== \"mcq\" && (\n        <div className=\"ml-6\">\n          <div className=\"flex items-center space-x-3 p-3 rounded-xl bg-success/10 border border-success/20\">\n            <div className=\"p-1 rounded-full bg-success text-success-foreground\">\n              <Check className=\"h-4 w-4\" />\n            </div>\n            <span className=\"text-success font-medium break-words text-wrap\">{question.correctAnswer}</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":25631},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { t } from \"@/lib/i18n\";\nimport { type InsertUser, type User } from \"@shared/schema\";\nimport { Brain, Mail, User as UserIcon, Building, Globe, Palette } from \"lucide-react\";\n\ntype AuthMode = \"login\" | \"register\";\n\nexport default function Auth() {\n  const { toast } = useToast();\n  const [mode, setMode] = useState<AuthMode>(\"login\");\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [role, setRole] = useState<\"professional\" | \"student\" | \"teacher\">(\"student\");\n  const [preferredLanguage, setPreferredLanguage] = useState(\"en\");\n  const [theme, setTheme] = useState<\"playful\" | \"minimal\">(\"playful\");\n  const [organizationName, setOrganizationName] = useState(\"\");\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: async (data: { email: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Store user in localStorage (in real app, use proper auth state management)\n      localStorage.setItem(\"qurious-user\", JSON.stringify(data.user));\n      \n      toast({\n        title: \"Login Successful\",\n        description: `Welcome back, ${data.user.username}!`\n      });\n      \n      // Redirect to dashboard\n      window.location.href = \"/\";\n    },\n    onError: (error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Register mutation\n  const registerMutation = useMutation({\n    mutationFn: async (userData: InsertUser) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", userData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Store user in localStorage\n      localStorage.setItem(\"qurious-user\", JSON.stringify(data.user));\n      \n      toast({\n        title: \"Registration Successful\",\n        description: `Welcome to Qurious, ${data.user.username}!`\n      });\n      \n      // Redirect to dashboard\n      window.location.href = \"/\";\n    },\n    onError: (error) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleLogin = () => {\n    if (!email.trim()) {\n      toast({\n        title: \"Email Required\",\n        description: \"Please enter your email address.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    loginMutation.mutate({ email: email.trim() });\n  };\n\n  const handleRegister = () => {\n    if (!email.trim() || !username.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const userData: InsertUser = {\n      email: email.trim(),\n      username: username.trim(),\n      role,\n      preferredLanguage,\n      theme,\n      organizationName: organizationName.trim() || undefined\n    };\n\n    registerMutation.mutate(userData);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 mx-auto mb-4 gradient-primary rounded-2xl flex items-center justify-center\">\n            <Brain className=\"h-8 w-8 text-primary-foreground\" />\n          </div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold mb-2 break-words text-wrap\">{t(\"header.title\")}</h1>\n          <p className=\"text-muted-foreground break-words text-wrap\">\n            {mode === \"login\" \n              ? \"Welcome back to your quiz platform\"\n              : \"Join the gamified learning experience\"\n            }\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center text-lg sm:text-xl break-words text-wrap\">\n              {mode === \"login\" ? \"Sign In\" : \"Create Account\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Email */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"you@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"pl-10 touch-target\"\n                  data-testid=\"input-email\"\n                />\n              </div>\n            </div>\n\n            {mode === \"register\" && (\n              <>\n                {/* Username */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Display Name</Label>\n                  <div className=\"relative\">\n                    <UserIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"username\"\n                      type=\"text\"\n                      placeholder=\"Your display name\"\n                      value={username}\n                      onChange={(e) => setUsername(e.target.value)}\n                      className=\"pl-10 touch-target\"\n                      data-testid=\"input-username\"\n                    />\n                  </div>\n                </div>\n\n                {/* Role Selection */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"role\">I am a...</Label>\n                  <Select value={role} onValueChange={(value: \"professional\" | \"student\" | \"teacher\") => setRole(value)}>\n                    <SelectTrigger className=\"touch-target\" data-testid=\"select-role\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"professional\">Working Professional</SelectItem>\n                      <SelectItem value=\"student\">Student</SelectItem>\n                      <SelectItem value=\"teacher\">Teacher/Educator</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Organization (for professionals) */}\n                {role === \"professional\" && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"organization\">Organization (Optional)</Label>\n                    <div className=\"relative\">\n                      <Building className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"organization\"\n                        type=\"text\"\n                        placeholder=\"Your company\"\n                        value={organizationName}\n                        onChange={(e) => setOrganizationName(e.target.value)}\n                        className=\"pl-10 touch-target\"\n                        data-testid=\"input-organization\"\n                      />\n                    </div>\n                  </div>\n                )}\n\n                {/* Preferences */}\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"language\">Language</Label>\n                    <Select value={preferredLanguage} onValueChange={setPreferredLanguage}>\n                      <SelectTrigger className=\"touch-target\" data-testid=\"select-language\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"en\">English</SelectItem>\n                        <SelectItem value=\"hi\">हिन्दी (Hindi)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"theme\">Theme</Label>\n                    <Select value={theme} onValueChange={(value: \"playful\" | \"minimal\") => setTheme(value)}>\n                      <SelectTrigger className=\"touch-target\" data-testid=\"select-theme\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"playful\">Playful</SelectItem>\n                        <SelectItem value=\"minimal\">Minimal</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </>\n            )}\n\n            {/* Submit Button */}\n            <Button\n              onClick={mode === \"login\" ? handleLogin : handleRegister}\n              disabled={loginMutation.isPending || registerMutation.isPending}\n              className=\"w-full gradient-primary text-primary-foreground py-3 text-base sm:text-lg font-semibold touch-target break-words text-wrap\"\n              data-testid={mode === \"login\" ? \"button-login\" : \"button-register\"}\n            >\n              {loginMutation.isPending || registerMutation.isPending ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-current mr-2\" />\n                  {mode === \"login\" ? \"Signing In...\" : \"Creating Account...\"}\n                </>\n              ) : (\n                <>\n                  {mode === \"login\" ? \"Sign In\" : \"Create Account\"}\n                </>\n              )}\n            </Button>\n\n            {/* Mode Toggle */}\n            <div className=\"text-center\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setMode(mode === \"login\" ? \"register\" : \"login\")}\n                className=\"text-sm break-words text-wrap\"\n                data-testid=\"button-toggle-mode\"\n              >\n                {mode === \"login\" \n                  ? \"Don't have an account? Sign up\"\n                  : \"Already have an account? Sign in\"\n                }\n              </Button>\n            </div>\n\n            {/* Demo Users Info */}\n            <div className=\"bg-muted/50 p-4 rounded-lg text-sm\">\n              <p className=\"font-medium mb-2 break-words text-wrap\">Demo Mode:</p>\n              <p className=\"text-muted-foreground break-words text-wrap\">\n                For testing, you can use any email address. In a production environment, \n                this would integrate with proper authentication providers.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center mt-6 text-sm text-muted-foreground\">\n          <p className=\"break-words text-wrap\">Built for India-first learning experiences</p>\n          <p className=\"mt-1 break-words text-wrap\">🇮🇳 Mobile-first • Multilingual • Low-bandwidth optimized</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11540},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { t } from \"@/lib/i18n\";\nimport { Sparkles, Play, Plus, Brain, Book, Globe, Trophy, Flame, Users, Target, Clock } from \"lucide-react\";\n\n// Mock user for now - in real app this would come from auth\nconst mockUser = {\n  id: \"user-1\",\n  name: \"Priya S.\",\n  email: \"priya@example.com\",\n  role: \"professional\" as const\n};\n\nexport default function Dashboard() {\n  const [user] = useState(mockUser);\n\n  // Fetch user's quizzes\n  const { data: quizzesData, isLoading: quizzesLoading } = useQuery({\n    queryKey: [\"/api/quizzes\", user.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/quizzes?userId=${user.id}`);\n      if (!response.ok) throw new Error(\"Failed to fetch quizzes\");\n      return response.json();\n    }\n  });\n\n  const quizzes = quizzesData?.quizzes || [];\n\n  // Mock stats - in real app this would be calculated from actual data\n  const stats = {\n    totalQuizzes: quizzes.length,\n    playersThisMonth: 1247,\n    avgScore: 84,\n    bestStreak: 7\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 max-w-7xl\">\n      {/* Welcome Section */}\n      <div className=\"mb-8\">\n        <div className=\"gradient-primary p-6 sm:p-8 rounded-2xl text-primary-foreground mb-8 shadow-xl\">\n          <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold mb-3 tracking-tight break-words text-wrap\">\n            {t(\"dashboard.welcome\")}, {user.name}! 👋\n          </h1>\n          <p className=\"text-lg sm:text-xl text-primary-foreground/90 font-medium break-words text-wrap\">\n            {t(\"dashboard.subtitle\")}\n          </p>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8\">\n          <StatsCard\n            icon={<Brain className=\"h-6 w-6\" />}\n            value={stats.totalQuizzes}\n            label={t(\"dashboard.total_quizzes\")}\n            color=\"text-primary\"\n          />\n          <StatsCard\n            icon={<Users className=\"h-6 w-6\" />}\n            value={stats.playersThisMonth.toLocaleString()}\n            label={t(\"dashboard.players_month\")}\n            color=\"text-accent\"\n          />\n          <StatsCard\n            icon={<Target className=\"h-6 w-6\" />}\n            value={`${stats.avgScore}%`}\n            label={t(\"dashboard.avg_score\")}\n            color=\"text-success\"\n          />\n          <StatsCard\n            icon={<Flame className=\"h-6 w-6\" />}\n            value={stats.bestStreak}\n            label={t(\"dashboard.best_streak\")}\n            color=\"text-warning\"\n          />\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8 mb-12\">\n        <Link href=\"/ai-builder\">\n          <Button\n            className=\"btn-primary-lg text-primary-foreground rounded-2xl hover:shadow-2xl transition-all duration-300 touch-target w-full h-auto shadow-lg\"\n            data-testid=\"button-create-ai-quiz\"\n          >\n            <div className=\"text-center py-4\">\n              <Sparkles className=\"h-10 w-10 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold mb-3 break-words text-wrap\">{t(\"dashboard.create_ai\")}</h3>\n              <p className=\"text-base opacity-90 leading-relaxed break-words text-wrap\">{t(\"dashboard.create_ai_desc\")}</p>\n            </div>\n          </Button>\n        </Link>\n\n        <Link href=\"/host-live\">\n          <Button\n            className=\"btn-secondary-lg text-accent-foreground rounded-2xl hover:shadow-2xl transition-all duration-300 touch-target w-full h-auto shadow-lg\"\n            data-testid=\"button-host-live\"\n          >\n            <div className=\"text-center py-4\">\n              <Play className=\"h-10 w-10 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold mb-3 break-words text-wrap\">{t(\"dashboard.host_live\")}</h3>\n              <p className=\"text-base opacity-90 leading-relaxed break-words text-wrap\">{t(\"dashboard.host_live_desc\")}</p>\n            </div>\n          </Button>\n        </Link>\n\n        <Button\n          variant=\"outline\"\n          className=\"border-2 border-dashed border-border text-card-foreground p-8 rounded-2xl hover:border-primary hover:bg-accent/5 transition-all duration-300 touch-target w-full h-auto card-elevated\"\n          data-testid=\"button-create-manual\"\n        >\n          <div className=\"text-center py-4\">\n            <Plus className=\"h-10 w-10 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-xl font-bold mb-3 break-words text-wrap\">{t(\"dashboard.create_manual\")}</h3>\n            <p className=\"text-base text-muted-foreground leading-relaxed break-words text-wrap\">{t(\"dashboard.create_manual_desc\")}</p>\n          </div>\n        </Button>\n      </div>\n\n      {/* Recent Quizzes */}\n      <Card className=\"card-elevated rounded-2xl border-0 shadow-lg\">\n        <CardHeader className=\"flex flex-row items-center justify-between p-8 pb-6\">\n          <CardTitle className=\"text-2xl font-bold\">{t(\"dashboard.recent_quizzes\")}</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-primary hover:text-primary/80\" data-testid=\"button-view-all-quizzes\">\n            {t(\"dashboard.view_all\")}\n          </Button>\n        </CardHeader>\n        <CardContent className=\"p-8 pt-0\">\n          {quizzesLoading ? (\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"flex items-center space-x-4 p-4\">\n                  <div className=\"w-12 h-12 bg-muted rounded-lg skeleton\" />\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"h-4 bg-muted rounded skeleton w-1/3\" />\n                    <div className=\"h-3 bg-muted rounded skeleton w-1/2\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : quizzes.length > 0 ? (\n            <div className=\"space-y-4\">\n              {quizzes.slice(0, 3).map((quiz: any) => (\n                <QuizCard key={quiz.id} quiz={quiz} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"bg-gradient-to-br from-primary/10 to-accent/10 rounded-full p-6 w-24 h-24 mx-auto mb-6 flex items-center justify-center\">\n                <Brain className=\"h-12 w-12 text-primary\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-3 text-foreground\">{t(\"dashboard.no_quizzes\")}</h3>\n              <p className=\"text-muted-foreground mb-8 text-lg leading-relaxed max-w-md mx-auto\">{t(\"dashboard.no_quizzes_desc\")}</p>\n              <Link href=\"/ai-builder\">\n                <Button className=\"btn-primary-lg text-primary-foreground rounded-xl shadow-lg\" data-testid=\"button-create-first-quiz\">\n                  <Sparkles className=\"h-5 w-5 mr-3\" />\n                  {t(\"dashboard.create_first\")}\n                </Button>\n              </Link>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\ninterface StatsCardProps {\n  icon: React.ReactNode;\n  value: string | number;\n  label: string;\n  color: string;\n}\n\nfunction StatsCard({ icon, value, label, color }: StatsCardProps) {\n  return (\n    <Card className=\"card-elevated rounded-xl border-0 shadow-md hover:shadow-lg transition-all duration-300\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-2xl sm:text-3xl font-bold text-foreground mb-1 break-words\" data-testid={`stat-${label.toLowerCase().replace(/\\s+/g, '-')}`}>\n              {value}\n            </p>\n            <p className=\"text-sm text-muted-foreground font-medium break-words text-wrap\">{label}</p>\n          </div>\n          <div className={`${color} p-3 rounded-full bg-gradient-to-br from-background to-secondary/50`}>\n            {icon}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface QuizCardProps {\n  quiz: any;\n}\n\nfunction QuizCard({ quiz }: QuizCardProps) {\n  const getQuizIcon = (title: string) => {\n    if (title.toLowerCase().includes(\"javascript\")) return <Brain className=\"h-6 w-6\" />;\n    if (title.toLowerCase().includes(\"ai\") || title.toLowerCase().includes(\"machine\")) return <Book className=\"h-6 w-6\" />;\n    return <Globe className=\"h-6 w-6\" />;\n  };\n\n  const getGradientClass = (index: number) => {\n    const gradients = [\n      \"from-primary to-accent\",\n      \"from-accent to-warning\", \n      \"from-success to-primary\"\n    ];\n    return gradients[index % gradients.length];\n  };\n\n  const questionCount = Array.isArray(quiz.questions) ? quiz.questions.length : 0;\n  const lastPlayed = new Date(quiz.updatedAt).toLocaleTimeString([], { \n    hour: '2-digit', \n    minute: '2-digit' \n  });\n\n  return (\n    <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 sm:p-6 bg-gradient-to-r from-background via-card to-background/50 rounded-xl border border-border/50 hover:border-primary/20 hover:shadow-md transition-all duration-300 gap-4\">\n      <div className=\"flex items-center space-x-3 sm:space-x-5 min-w-0 flex-1\">\n        <div className={`w-14 h-14 bg-gradient-to-r ${getGradientClass(0)} rounded-xl flex items-center justify-center text-primary-foreground shadow-lg`}>\n          {getQuizIcon(quiz.title)}\n        </div>\n        <div className=\"min-w-0 flex-1\">\n          <h4 className=\"font-semibold text-lg mb-1 break-words text-wrap\" data-testid={`quiz-title-${quiz.id}`}>\n            {quiz.title}\n          </h4>\n          <p className=\"text-sm text-muted-foreground break-words\">\n            <span data-testid={`quiz-question-count-${quiz.id}`} className=\"font-medium\">{questionCount}</span> questions • \n            <span className=\"ml-1\" data-testid={`quiz-last-played-${quiz.id}`}>{lastPlayed}</span>\n          </p>\n        </div>\n      </div>\n      <div className=\"flex items-center space-x-3 flex-shrink-0\">\n        <Button variant=\"ghost\" size=\"sm\" className=\"touch-target hover:bg-primary/10 rounded-xl\" data-testid={`button-play-${quiz.id}`}>\n          <Play className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n        </Button>\n        <Button variant=\"ghost\" size=\"sm\" className=\"touch-target hover:bg-accent/10 rounded-xl\" data-testid={`button-edit-${quiz.id}`}>\n          <Brain className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10604},"client/src/pages/host-live.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { QRCode } from \"@/components/qr-code\";\nimport { t } from \"@/lib/i18n\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type Quiz, type Session, type Participant, type GameSettings } from \"@shared/schema\";\nimport { Rocket, Play, Pause, Square, Users, Clock, Target, Zap, Trophy, Settings } from \"lucide-react\";\n\n// Mock user for now\nconst mockUser = { id: \"user-1\", name: \"Host\" };\n\ntype SessionStatus = \"setup\" | \"waiting\" | \"active\" | \"paused\" | \"completed\";\n\nexport default function HostLive() {\n  const { toast } = useToast();\n  const [user] = useState(mockUser);\n  const [sessionStatus, setSessionStatus] = useState<SessionStatus>(\"setup\");\n  const [selectedQuizId, setSelectedQuizId] = useState<string>(\"\");\n  const [currentSession, setCurrentSession] = useState<Session | null>(null);\n  const [participants, setParticipants] = useState<Participant[]>([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [questionResponses, setQuestionResponses] = useState<{[key: string]: number}>({});\n\n  const [gameSettings, setGameSettings] = useState<GameSettings>({\n    mode: \"accuracy\",\n    timePerQuestion: 30,\n    enableStreaks: true,\n    enableConfetti: true,\n    enableSounds: false,\n    showAnswersAfterEach: false\n  });\n\n  // WebSocket connection for real-time updates\n  const { subscribe, send, isConnected } = useWebSocket({\n    onConnect: () => {\n      console.log(\"WebSocket connected for host\");\n    },\n    onDisconnect: () => {\n      console.log(\"WebSocket disconnected for host\");\n    }\n  });\n\n  // Fetch user's quizzes\n  const { data: quizzesData, isLoading: quizzesLoading } = useQuery({\n    queryKey: [\"/api/quizzes\", user.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/quizzes?userId=${user.id}`);\n      if (!response.ok) throw new Error(\"Failed to fetch quizzes\");\n      return response.json();\n    }\n  });\n\n  const quizzes = quizzesData?.quizzes || [];\n\n  // Create session mutation\n  const createSessionMutation = useMutation({\n    mutationFn: async (data: {\n      quizId: string;\n      hostId: string;\n      settings: GameSettings;\n    }) => {\n      const response = await apiRequest(\"POST\", \"/api/session\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentSession(data.session);\n      setSessionStatus(\"waiting\");\n      \n      // Connect to WebSocket as host\n      if (isConnected) {\n        send({\n          type: \"host_session\",\n          data: {\n            sessionId: data.session.id,\n            userId: user.id\n          }\n        });\n      }\n\n      toast({\n        title: \"Session Created\",\n        description: `Session code: ${data.session.sessionCode}`\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Create Session\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // WebSocket event handlers\n  useEffect(() => {\n    if (!isConnected || !currentSession) return;\n\n    const unsubscribeParticipantJoined = subscribe(\"participant_joined\", (data) => {\n      setParticipants(prev => [...prev, data.participant]);\n      toast({\n        title: \"Player Joined\",\n        description: `${data.participant.nickname} joined the session`\n      });\n    });\n\n    const unsubscribeParticipantLeft = subscribe(\"participant_left\", (data) => {\n      setParticipants(prev => prev.filter(p => p.id !== data.participantId));\n    });\n\n    const unsubscribeParticipantAnswered = subscribe(\"participant_answered\", (data) => {\n      setQuestionResponses(prev => ({\n        ...prev,\n        [`${data.questionIndex}-${data.participantId}`]: Date.now()\n      }));\n    });\n\n    return () => {\n      unsubscribeParticipantJoined();\n      unsubscribeParticipantLeft();\n      unsubscribeParticipantAnswered();\n    };\n  }, [subscribe, isConnected, currentSession]);\n\n  const handleCreateSession = () => {\n    if (!selectedQuizId) {\n      toast({\n        title: \"Select Quiz\",\n        description: \"Please select a quiz to host.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    createSessionMutation.mutate({\n      quizId: selectedQuizId,\n      hostId: user.id,\n      settings: gameSettings\n    });\n  };\n\n  const handleStartSession = () => {\n    if (!currentSession || !isConnected) return;\n\n    send({\n      type: \"host_start_session\",\n      data: { sessionId: currentSession.id }\n    });\n\n    setSessionStatus(\"active\");\n    setCurrentQuestionIndex(0);\n\n    toast({\n      title: \"Quiz Started\",\n      description: \"The quiz has begun!\"\n    });\n  };\n\n  const handlePauseSession = () => {\n    if (!currentSession || !isConnected) return;\n\n    send({\n      type: \"host_pause_session\", \n      data: { sessionId: currentSession.id }\n    });\n\n    setSessionStatus(\"paused\");\n\n    toast({\n      title: \"Quiz Paused\",\n      description: \"The quiz has been paused.\"\n    });\n  };\n\n  const handleNextQuestion = () => {\n    if (!currentSession || !isConnected) return;\n\n    const nextIndex = currentQuestionIndex + 1;\n    setCurrentQuestionIndex(nextIndex);\n\n    send({\n      type: \"host_next_question\",\n      data: { \n        sessionId: currentSession.id,\n        questionIndex: nextIndex\n      }\n    });\n  };\n\n  const handleEndSession = () => {\n    if (!currentSession || !isConnected) return;\n\n    send({\n      type: \"host_end_session\",\n      data: { sessionId: currentSession.id }\n    });\n\n    setSessionStatus(\"completed\");\n\n    toast({\n      title: \"Quiz Ended\",\n      description: \"The quiz has ended. View results in the Analytics section.\"\n    });\n  };\n\n  const selectedQuiz = quizzes.find((q: Quiz) => q.id === selectedQuizId);\n  const totalQuestions = selectedQuiz?.questions ? (Array.isArray(selectedQuiz.questions) ? selectedQuiz.questions.length : 0) : 0;\n  const currentQuestion = selectedQuiz?.questions && Array.isArray(selectedQuiz.questions) ? selectedQuiz.questions[currentQuestionIndex] : null;\n\n  if (sessionStatus === \"setup\") {\n    return <SetupView \n      quizzes={quizzes}\n      quizzesLoading={quizzesLoading}\n      selectedQuizId={selectedQuizId}\n      setSelectedQuizId={setSelectedQuizId}\n      gameSettings={gameSettings}\n      setGameSettings={setGameSettings}\n      onCreateSession={handleCreateSession}\n      isCreating={createSessionMutation.isPending}\n    />;\n  }\n\n  if (sessionStatus === \"waiting\") {\n    return <WaitingView\n      session={currentSession!}\n      participants={participants}\n      onStartSession={handleStartSession}\n      onEndSession={handleEndSession}\n    />;\n  }\n\n  if (sessionStatus === \"active\" || sessionStatus === \"paused\") {\n    return <ActiveView\n      session={currentSession!}\n      participants={participants}\n      currentQuestion={currentQuestion}\n      currentQuestionIndex={currentQuestionIndex}\n      totalQuestions={totalQuestions}\n      questionResponses={questionResponses}\n      sessionStatus={sessionStatus}\n      onNextQuestion={handleNextQuestion}\n      onPauseSession={handlePauseSession}\n      onStartSession={handleStartSession}\n      onEndSession={handleEndSession}\n    />;\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 text-center\">\n      <h2 className=\"text-2xl font-bold mb-4\">Session Completed</h2>\n      <p className=\"text-muted-foreground mb-6\">\n        Your quiz session has ended. View the results in the Analytics section.\n      </p>\n      <Button onClick={() => {\n        setSessionStatus(\"setup\");\n        setCurrentSession(null);\n        setParticipants([]);\n        setCurrentQuestionIndex(0);\n        setQuestionResponses({});\n      }}>\n        Create New Session\n      </Button>\n    </div>\n  );\n}\n\ninterface SetupViewProps {\n  quizzes: Quiz[];\n  quizzesLoading: boolean;\n  selectedQuizId: string;\n  setSelectedQuizId: (id: string) => void;\n  gameSettings: GameSettings;\n  setGameSettings: (settings: GameSettings) => void;\n  onCreateSession: () => void;\n  isCreating: boolean;\n}\n\nfunction SetupView({\n  quizzes,\n  quizzesLoading,\n  selectedQuizId,\n  setSelectedQuizId,\n  gameSettings,\n  setGameSettings,\n  onCreateSession,\n  isCreating\n}: SetupViewProps) {\n  return (\n    <div className=\"container mx-auto px-4 py-6 max-w-6xl\">\n      <div className=\"mb-12\">\n        <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold mb-3 tracking-tight break-words text-wrap\">{t(\"host.title\")}</h1>\n        <p className=\"text-lg sm:text-xl text-muted-foreground font-medium break-words text-wrap\">{t(\"host.subtitle\")}</p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 gap-10\">\n        {/* Quiz Selection */}\n        <Card className=\"card-elevated rounded-2xl border-0 shadow-lg\">\n          <CardHeader className=\"p-8 pb-6\">\n            <CardTitle className=\"text-xl sm:text-2xl font-bold flex flex-col sm:flex-row items-start sm:items-center gap-3 break-words text-wrap\">\n              <span className=\"bg-gradient-to-r from-primary to-accent text-primary-foreground w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0\">1</span>\n              <span className=\"min-w-0\">{t(\"host.select_quiz\")}</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-8 pt-0\">\n            {quizzesLoading ? (\n              <div className=\"space-y-3\">\n                {[1, 2, 3].map((i) => (\n                  <div key={i} className=\"p-3 border rounded-lg\">\n                    <div className=\"h-4 bg-muted rounded skeleton w-1/2 mb-2\" />\n                    <div className=\"h-3 bg-muted rounded skeleton w-3/4\" />\n                  </div>\n                ))}\n              </div>\n            ) : quizzes.length > 0 ? (\n              <div className=\"space-y-3\">\n                {quizzes.map((quiz: Quiz) => (\n                  <label\n                    key={quiz.id}\n                    className={`flex items-center space-x-4 p-5 border-2 rounded-2xl hover:border-primary/50 hover:shadow-md transition-all duration-300 cursor-pointer ${\n                      selectedQuizId === quiz.id \n                        ? \"border-primary bg-gradient-to-r from-primary/5 to-primary/10 shadow-md\" \n                        : \"border-border bg-gradient-to-r from-background to-card/50\"\n                    }`}\n                  >\n                    <input\n                      type=\"radio\"\n                      name=\"selectedQuiz\"\n                      value={quiz.id}\n                      checked={selectedQuizId === quiz.id}\n                      onChange={(e) => setSelectedQuizId(e.target.value)}\n                      className=\"w-5 h-5 text-primary\"\n                      data-testid={`radio-quiz-${quiz.id}`}\n                    />\n                    <div className=\"flex-1 min-w-0\">\n                      <h4 className=\"font-semibold text-lg mb-1 break-words text-wrap\">{quiz.title}</h4>\n                      <p className=\"text-sm text-muted-foreground font-medium break-words\">\n                        {Array.isArray(quiz.questions) ? quiz.questions.length : 0} questions • \n                        Created {new Date(quiz.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </label>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <div className=\"bg-gradient-to-br from-primary/10 to-accent/10 rounded-full p-6 w-24 h-24 mx-auto mb-6 flex items-center justify-center\">\n                  <Settings className=\"h-12 w-12 text-primary\" />\n                </div>\n                <p className=\"text-muted-foreground text-lg\">No quizzes available. Create a quiz first.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Game Settings */}\n        <Card className=\"card-elevated rounded-2xl border-0 shadow-lg\">\n          <CardHeader className=\"p-8 pb-6\">\n            <CardTitle className=\"text-xl sm:text-2xl font-bold flex flex-col sm:flex-row items-start sm:items-center gap-3 break-words text-wrap\">\n              <span className=\"bg-gradient-to-r from-accent to-primary text-primary-foreground w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0\">2</span>\n              <span className=\"min-w-0\">{t(\"host.game_settings\")}</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-8 p-8 pt-0\">\n            <div>\n              <Label className=\"text-sm font-medium mb-2 block\">{t(\"host.game_mode\")}</Label>\n              <Select\n                value={gameSettings.mode}\n                onValueChange={(value: \"speed\" | \"accuracy\" | \"team\") => \n                  setGameSettings({ ...gameSettings, mode: value })\n                }\n              >\n                <SelectTrigger className=\"touch-target\" data-testid=\"select-game-mode\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"speed\">{t(\"host.speed_mode\")}</SelectItem>\n                  <SelectItem value=\"accuracy\">{t(\"host.accuracy_mode\")}</SelectItem>\n                  <SelectItem value=\"team\">{t(\"host.team_mode\")}</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium mb-2 block\">{t(\"host.time_per_question\")}</Label>\n              <Select\n                value={gameSettings.timePerQuestion.toString()}\n                onValueChange={(value) => \n                  setGameSettings({ ...gameSettings, timePerQuestion: parseInt(value) })\n                }\n              >\n                <SelectTrigger className=\"touch-target\" data-testid=\"select-time-per-question\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"15\">15 seconds</SelectItem>\n                  <SelectItem value=\"30\">30 seconds</SelectItem>\n                  <SelectItem value=\"45\">45 seconds</SelectItem>\n                  <SelectItem value=\"60\">60 seconds</SelectItem>\n                  <SelectItem value=\"0\">No timer</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium mb-3 block\">{t(\"host.features\")}</Label>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"streaks\"\n                    checked={gameSettings.enableStreaks}\n                    onCheckedChange={(checked) => \n                      setGameSettings({ ...gameSettings, enableStreaks: checked as boolean })\n                    }\n                    data-testid=\"checkbox-streaks\"\n                  />\n                  <Label htmlFor=\"streaks\" className=\"text-sm\">{t(\"host.streak_bonuses\")}</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"confetti\"\n                    checked={gameSettings.enableConfetti}\n                    onCheckedChange={(checked) => \n                      setGameSettings({ ...gameSettings, enableConfetti: checked as boolean })\n                    }\n                    data-testid=\"checkbox-confetti\"\n                  />\n                  <Label htmlFor=\"confetti\" className=\"text-sm\">{t(\"host.confetti\")}</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"sounds\"\n                    checked={gameSettings.enableSounds}\n                    onCheckedChange={(checked) => \n                      setGameSettings({ ...gameSettings, enableSounds: checked as boolean })\n                    }\n                    data-testid=\"checkbox-sounds\"\n                  />\n                  <Label htmlFor=\"sounds\" className=\"text-sm\">{t(\"host.sound_effects\")}</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"showAnswers\"\n                    checked={gameSettings.showAnswersAfterEach}\n                    onCheckedChange={(checked) => \n                      setGameSettings({ ...gameSettings, showAnswersAfterEach: checked as boolean })\n                    }\n                    data-testid=\"checkbox-show-answers\"\n                  />\n                  <Label htmlFor=\"showAnswers\" className=\"text-sm\">{t(\"host.show_answers\")}</Label>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"text-center mt-12\">\n        <Button\n          onClick={onCreateSession}\n          disabled={!selectedQuizId || isCreating}\n          className=\"btn-primary-lg text-primary-foreground rounded-2xl hover:shadow-2xl transition-all duration-300 touch-target shadow-xl text-xl px-12 py-6\"\n          data-testid=\"button-create-session\"\n        >\n          {isCreating ? (\n            <>\n              <Settings className=\"h-6 w-6 mr-3 animate-spin\" />\n              Creating Session...\n            </>\n          ) : (\n            <>\n              <Rocket className=\"h-6 w-6 mr-3\" />\n              {t(\"host.create_session\")}\n            </>\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\ninterface WaitingViewProps {\n  session: Session;\n  participants: Participant[];\n  onStartSession: () => void;\n  onEndSession: () => void;\n}\n\nfunction WaitingView({ session, participants, onStartSession, onEndSession }: WaitingViewProps) {\n  const joinUrl = `${window.location.origin}/join/${session.sessionCode}`;\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 max-w-6xl\">\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Session Info & QR Code */}\n        <Card>\n          <CardHeader>\n            <CardTitle>{t(\"host.session_details\")}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center mb-6\">\n              <div className=\"mb-4\">\n                <QRCode value={joinUrl} size={150} />\n              </div>\n              <div className=\"gradient-primary p-4 rounded-lg text-primary-foreground mb-4\">\n                <p className=\"text-sm font-medium\">{t(\"host.join_code\")}</p>\n                <p className=\"text-3xl font-bold\" data-testid=\"session-code\">\n                  {session.sessionCode}\n                </p>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Players can scan QR or visit {window.location.host}/join\n              </p>\n            </div>\n\n            {/* Session Controls */}\n            <div className=\"space-y-3\">\n              <Button\n                onClick={onStartSession}\n                className=\"w-full py-3 bg-success text-white hover:bg-success/90 transition-colors touch-target\"\n                data-testid=\"button-start-session\"\n              >\n                <Play className=\"h-4 w-4 mr-2\" />\n                {t(\"host.start_quiz\")}\n              </Button>\n              <Button\n                onClick={onEndSession}\n                variant=\"outline\"\n                className=\"w-full py-3 border-destructive text-destructive hover:bg-destructive/10 transition-colors touch-target\"\n                data-testid=\"button-end-session\"\n              >\n                <Square className=\"h-4 w-4 mr-2\" />\n                {t(\"host.end_session\")}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Participants */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>{t(\"host.participants\")}</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-success rounded-full animate-pulse\" />\n                <span className=\"text-sm font-medium\" data-testid=\"participant-count\">\n                  {participants.length} joined\n                </span>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {participants.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Users className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">Waiting for players to join...</p>\n              </div>\n            ) : (\n              <div className=\"max-h-64 overflow-y-auto space-y-2\">\n                {participants.map((participant) => (\n                  <div\n                    key={participant.id}\n                    className=\"flex items-center justify-between p-3 bg-secondary/30 rounded-lg\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 gradient-primary rounded-full flex items-center justify-center\">\n                        <span className=\"text-xs font-bold text-primary-foreground\">\n                          {participant.nickname.charAt(0).toUpperCase()}\n                        </span>\n                      </div>\n                      <span className=\"font-medium\">{participant.nickname}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-success rounded-full\" />\n                      <span className=\"text-xs text-muted-foreground\">Ready</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\ninterface ActiveViewProps {\n  session: Session;\n  participants: Participant[];\n  currentQuestion: any;\n  currentQuestionIndex: number;\n  totalQuestions: number;\n  questionResponses: {[key: string]: number};\n  sessionStatus: SessionStatus;\n  onNextQuestion: () => void;\n  onPauseSession: () => void;\n  onStartSession: () => void;\n  onEndSession: () => void;\n}\n\nfunction ActiveView({\n  session,\n  participants,\n  currentQuestion,\n  currentQuestionIndex,\n  totalQuestions,\n  questionResponses,\n  sessionStatus,\n  onNextQuestion,\n  onPauseSession,\n  onStartSession,\n  onEndSession\n}: ActiveViewProps) {\n  const responseCount = Object.keys(questionResponses)\n    .filter(key => key.startsWith(`${currentQuestionIndex}-`))\n    .length;\n\n  if (!currentQuestion) {\n    return (\n      <div className=\"container mx-auto px-4 py-6 text-center\">\n        <h2 className=\"text-2xl font-bold mb-4\">Quiz Complete!</h2>\n        <p className=\"text-muted-foreground mb-6\">\n          All questions have been answered.\n        </p>\n        <Button onClick={onEndSession} className=\"gradient-primary\">\n          View Results\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 max-w-6xl\">\n      {/* Question Progress */}\n      <div className=\"mb-6 text-center\">\n        <div className=\"inline-flex items-center space-x-4 bg-card px-6 py-3 rounded-lg border border-border\">\n          <span className=\"text-sm text-muted-foreground\">Question</span>\n          <span className=\"text-lg font-bold text-primary\" data-testid=\"current-question\">\n            {currentQuestionIndex + 1}\n          </span>\n          <span className=\"text-sm text-muted-foreground\">of</span>\n          <span className=\"text-lg font-bold\" data-testid=\"total-questions\">\n            {totalQuestions}\n          </span>\n        </div>\n      </div>\n\n      {/* Current Question */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-8 text-center\">\n          <h2 className=\"text-xl sm:text-2xl font-bold mb-6 break-words text-wrap\" data-testid=\"question-text\">\n            {currentQuestion.question}\n          </h2>\n\n          {/* Answer Options for MCQ */}\n          {currentQuestion.type === \"mcq\" && currentQuestion.options && (\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              {currentQuestion.options.map((option: string, index: number) => (\n                <div\n                  key={index}\n                  className=\"p-4 border-2 border-border rounded-lg bg-secondary/20 hover:bg-secondary/30 transition-colors\"\n                >\n                  <span className=\"font-medium\">{option}</span>\n                  <div className=\"mt-2 text-sm text-muted-foreground\">\n                    Responses: {/* TODO: Track option-specific responses */}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* True/False Options */}\n          {currentQuestion.type === \"true_false\" && (\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div className=\"p-4 border-2 border-border rounded-lg bg-secondary/20\">\n                <span className=\"font-medium\">True</span>\n              </div>\n              <div className=\"p-4 border-2 border-border rounded-lg bg-secondary/20\">\n                <span className=\"font-medium\">False</span>\n              </div>\n            </div>\n          )}\n\n          {/* Response Stats */}\n          <div className=\"mt-6 flex items-center justify-center space-x-6 text-sm text-muted-foreground\">\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"h-4 w-4\" />\n              <span>{responseCount} of {participants.length} responded</span>\n            </div>\n            {sessionStatus === \"paused\" && (\n              <Badge variant=\"outline\" className=\"text-warning\">\n                Paused\n              </Badge>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Host Controls */}\n      <div className=\"flex justify-center space-x-4\">\n        <Button\n          onClick={onNextQuestion}\n          disabled={currentQuestionIndex >= totalQuestions - 1}\n          className=\"px-6 py-3 bg-primary text-primary-foreground hover:bg-primary/90 transition-colors touch-target\"\n          data-testid=\"button-next-question\"\n        >\n          <Target className=\"h-4 w-4 mr-2\" />\n          Next Question\n        </Button>\n        \n        {sessionStatus === \"active\" ? (\n          <Button\n            onClick={onPauseSession}\n            variant=\"outline\"\n            className=\"px-6 py-3 border-border hover:bg-secondary transition-colors touch-target\"\n            data-testid=\"button-pause\"\n          >\n            <Pause className=\"h-4 w-4 mr-2\" />\n            Pause\n          </Button>\n        ) : (\n          <Button\n            onClick={onStartSession}\n            variant=\"outline\"\n            className=\"px-6 py-3 border-border hover:bg-secondary transition-colors touch-target\"\n            data-testid=\"button-resume\"\n          >\n            <Play className=\"h-4 w-4 mr-2\" />\n            Resume\n          </Button>\n        )}\n        \n        <Button\n          onClick={onEndSession}\n          variant=\"outline\"\n          className=\"px-6 py-3 border-destructive text-destructive hover:bg-destructive/10 transition-colors touch-target\"\n          data-testid=\"button-end-quiz\"\n        >\n          <Square className=\"h-4 w-4 mr-2\" />\n          End Quiz\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":27636},"client/src/pages/join-quiz.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { Confetti } from \"@/components/confetti\";\nimport { t } from \"@/lib/i18n\";\nimport { type Session, type Quiz, type Participant } from \"@shared/schema\";\nimport { \n  Brain, \n  Camera, \n  LogIn, \n  Users, \n  Clock, \n  Target, \n  Trophy, \n  Flame,\n  Check,\n  X,\n  Star\n} from \"lucide-react\";\n\ntype JoinStatus = \"entering\" | \"joining\" | \"lobby\" | \"playing\" | \"finished\";\n\nexport default function JoinQuiz() {\n  const params = useParams();\n  const { toast } = useToast();\n  \n  const [joinStatus, setJoinStatus] = useState<JoinStatus>(\"entering\");\n  const [sessionCode, setSessionCode] = useState(params.code || \"\");\n  const [nickname, setNickname] = useState(\"\");\n  const [session, setSession] = useState<Session | null>(null);\n  const [quiz, setQuiz] = useState<Quiz | null>(null);\n  const [participantId, setParticipantId] = useState<string>(\"\");\n  const [otherParticipants, setOtherParticipants] = useState<Participant[]>([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState<string>(\"\");\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [showConfetti, setShowConfetti] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n\n  // WebSocket connection\n  const { subscribe, send, isConnected } = useWebSocket({\n    onConnect: () => {\n      console.log(\"WebSocket connected for participant\");\n    }\n  });\n\n  // Auto-fill code from URL params\n  useEffect(() => {\n    if (params.code) {\n      setSessionCode(params.code.toUpperCase());\n    }\n  }, [params.code]);\n\n  // Join session mutation\n  const joinMutation = useMutation({\n    mutationFn: async (data: { sessionCode: string; nickname: string }) => {\n      const response = await fetch(`/api/session/code/${data.sessionCode}`);\n      if (!response.ok) {\n        throw new Error(\"Session not found\");\n      }\n      const sessionData = await response.json();\n      \n      // Get quiz details\n      const quizResponse = await fetch(`/api/quiz/${sessionData.session.quizId}`);\n      if (!quizResponse.ok) {\n        throw new Error(\"Failed to load quiz\");\n      }\n      const quizData = await quizResponse.json();\n      \n      return { session: sessionData.session, quiz: quizData.quiz };\n    },\n    onSuccess: (data) => {\n      setSession(data.session);\n      setQuiz(data.quiz);\n      setJoinStatus(\"joining\");\n\n      // Connect to WebSocket\n      if (isConnected) {\n        send({\n          type: \"join_session\",\n          data: {\n            sessionCode: sessionCode.toUpperCase(),\n            nickname: nickname\n          }\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Join\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // WebSocket event handlers\n  useEffect(() => {\n    if (!isConnected) return;\n\n    const unsubscribeJoinSuccess = subscribe(\"join_success\", (data) => {\n      setParticipantId(data.participantId);\n      setJoinStatus(\"lobby\");\n      toast({\n        title: \"Joined Successfully!\",\n        description: \"Waiting for the quiz to start...\"\n      });\n    });\n\n    const unsubscribeParticipantJoined = subscribe(\"participant_joined\", (data) => {\n      if (data.participant.id !== participantId) {\n        setOtherParticipants(prev => [...prev, data.participant]);\n      }\n    });\n\n    const unsubscribeParticipantLeft = subscribe(\"participant_left\", (data) => {\n      setOtherParticipants(prev => prev.filter(p => p.id !== data.participantId));\n    });\n\n    const unsubscribeSessionStarted = subscribe(\"session_started\", () => {\n      setJoinStatus(\"playing\");\n      setGameStarted(true);\n      setCurrentQuestionIndex(0);\n      toast({\n        title: \"Quiz Started!\",\n        description: \"Get ready for the first question!\"\n      });\n    });\n\n    const unsubscribeNextQuestion = subscribe(\"next_question\", (data) => {\n      setCurrentQuestionIndex(data.questionIndex);\n      setSelectedAnswer(\"\");\n      setTimeRemaining(30); // Reset timer\n    });\n\n    const unsubscribeAnswerReceived = subscribe(\"answer_received\", (data) => {\n      setScore(prev => prev + data.points);\n      setStreak(data.streak);\n      \n      if (data.isCorrect) {\n        setShowConfetti(true);\n        toast({\n          title: \"Correct! 🎉\",\n          description: `+${data.points} points${data.streak > 1 ? ` (${data.streak} streak!)` : \"\"}`\n        });\n      } else {\n        toast({\n          title: \"Incorrect\",\n          description: \"Better luck next time!\",\n          variant: \"destructive\"\n        });\n      }\n    });\n\n    const unsubscribeSessionEnded = subscribe(\"session_ended\", () => {\n      setJoinStatus(\"finished\");\n      toast({\n        title: \"Quiz Finished!\",\n        description: \"Thanks for playing!\"\n      });\n    });\n\n    return () => {\n      unsubscribeJoinSuccess();\n      unsubscribeParticipantJoined();\n      unsubscribeParticipantLeft();\n      unsubscribeSessionStarted();\n      unsubscribeNextQuestion();\n      unsubscribeAnswerReceived();\n      unsubscribeSessionEnded();\n    };\n  }, [subscribe, isConnected, participantId]);\n\n  // Timer countdown\n  useEffect(() => {\n    if (joinStatus !== \"playing\" || selectedAnswer || timeRemaining <= 0) return;\n\n    const timer = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 1) {\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [joinStatus, selectedAnswer, timeRemaining]);\n\n  const handleJoinQuiz = () => {\n    if (!sessionCode.trim() || !nickname.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter both quiz code and your nickname.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    joinMutation.mutate({\n      sessionCode: sessionCode.toUpperCase(),\n      nickname: nickname.trim()\n    });\n  };\n\n  const handleAnswerSelect = (answer: string) => {\n    if (selectedAnswer || !isConnected) return;\n\n    setSelectedAnswer(answer);\n    \n    const responseTime = (30 - timeRemaining) * 1000; // Convert to milliseconds\n\n    send({\n      type: \"participant_answer\",\n      data: {\n        questionIndex: currentQuestionIndex,\n        answer: answer,\n        responseTime: responseTime\n      }\n    });\n  };\n\n  if (joinStatus === \"entering\") {\n    return <EnterView\n      sessionCode={sessionCode}\n      setSessionCode={setSessionCode}\n      nickname={nickname}\n      setNickname={setNickname}\n      onJoin={handleJoinQuiz}\n      isJoining={joinMutation.isPending}\n    />;\n  }\n\n  if (joinStatus === \"joining\") {\n    return <div className=\"container mx-auto px-4 py-6 text-center max-w-md\">\n      <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\" />\n      <p className=\"text-lg\">Joining quiz...</p>\n    </div>;\n  }\n\n  if (joinStatus === \"lobby\") {\n    return <LobbyView\n      quiz={quiz!}\n      otherParticipants={otherParticipants}\n    />;\n  }\n\n  if (joinStatus === \"playing\") {\n    const currentQuestion = quiz?.questions && Array.isArray(quiz.questions) \n      ? quiz.questions[currentQuestionIndex] \n      : null;\n    const totalQuestions = quiz?.questions && Array.isArray(quiz.questions) \n      ? quiz.questions.length \n      : 0;\n\n    return <PlayingView\n      question={currentQuestion}\n      currentQuestionIndex={currentQuestionIndex}\n      totalQuestions={totalQuestions}\n      selectedAnswer={selectedAnswer}\n      onAnswerSelect={handleAnswerSelect}\n      score={score}\n      streak={streak}\n      timeRemaining={timeRemaining}\n      showConfetti={showConfetti}\n      onConfettiComplete={() => setShowConfetti(false)}\n    />;\n  }\n\n  if (joinStatus === \"finished\") {\n    return <FinishedView score={score} streak={streak} />;\n  }\n\n  return null;\n}\n\ninterface EnterViewProps {\n  sessionCode: string;\n  setSessionCode: (code: string) => void;\n  nickname: string;\n  setNickname: (name: string) => void;\n  onJoin: () => void;\n  isJoining: boolean;\n}\n\nfunction EnterView({ sessionCode, setSessionCode, nickname, setNickname, onJoin, isJoining }: EnterViewProps) {\n  return (\n    <div className=\"container mx-auto px-4 py-6 max-w-md\">\n      <div className=\"text-center mb-12\">\n        <div className=\"w-24 h-24 mx-auto mb-6 gradient-primary rounded-3xl flex items-center justify-center shadow-xl\">\n          <Brain className=\"h-12 w-12 text-primary-foreground\" />\n        </div>\n        <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold mb-3 tracking-tight break-words text-wrap\">{t(\"join.title\")}</h1>\n        <p className=\"text-lg sm:text-xl text-muted-foreground font-medium break-words text-wrap\">{t(\"join.subtitle\")}</p>\n      </div>\n\n      <div className=\"space-y-6 mb-10\">\n        <Input\n          type=\"text\"\n          placeholder={t(\"join.enter_code\")}\n          value={sessionCode}\n          onChange={(e) => setSessionCode(e.target.value.toUpperCase())}\n          className=\"text-center text-lg sm:text-xl lg:text-2xl font-mono tracking-wider touch-target rounded-2xl border-2 focus:border-primary p-4 sm:p-6 shadow-md break-words\"\n          maxLength={6}\n          data-testid=\"input-session-code\"\n        />\n        \n        <Input\n          type=\"text\"\n          placeholder={t(\"join.nickname\")}\n          value={nickname}\n          onChange={(e) => setNickname(e.target.value)}\n          className=\"text-center text-lg sm:text-xl touch-target rounded-2xl border-2 focus:border-primary p-4 sm:p-6 shadow-md break-words\"\n          data-testid=\"input-nickname\"\n        />\n\n        <Button\n          onClick={onJoin}\n          disabled={isJoining || !sessionCode.trim() || !nickname.trim()}\n          className=\"btn-primary-lg w-full text-primary-foreground rounded-2xl hover:shadow-2xl transition-all duration-300 touch-target shadow-xl text-xl py-6\"\n          data-testid=\"button-join\"\n        >\n          {isJoining ? (\n            <>\n              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-current mr-3\" />\n              Joining...\n            </>\n          ) : (\n            <>\n              <LogIn className=\"h-6 w-6 mr-3\" />\n              {t(\"join.join_button\")}\n            </>\n          )}\n        </Button>\n      </div>\n\n      <div className=\"text-center\">\n        <p className=\"text-base text-muted-foreground mb-6 font-medium\">or</p>\n        <Button\n          variant=\"outline\"\n          className=\"px-8 py-4 border-2 border-border rounded-2xl hover:bg-accent/5 hover:border-primary/50 transition-all duration-300 touch-target shadow-md\"\n          data-testid=\"button-scan-qr\"\n        >\n          <Camera className=\"h-5 w-5 mr-3\" />\n          {t(\"join.scan_qr\")}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\ninterface LobbyViewProps {\n  quiz: Quiz;\n  otherParticipants: Participant[];\n}\n\nfunction LobbyView({ quiz, otherParticipants }: LobbyViewProps) {\n  const questionCount = Array.isArray(quiz.questions) ? quiz.questions.length : 0;\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 max-w-md\">\n      <div className=\"text-center mb-10\">\n        <div className=\"w-20 h-20 mx-auto mb-6 gradient-success rounded-3xl flex items-center justify-center bounce-in shadow-xl\">\n          <Check className=\"h-10 w-10 text-primary-foreground\" />\n        </div>\n        <h2 className=\"text-3xl font-bold mb-3 tracking-tight\">{t(\"join.youre_in\")} 🎉</h2>\n        <p className=\"text-lg text-muted-foreground font-medium\">{t(\"join.waiting\")}</p>\n      </div>\n\n      {/* Quiz Info */}\n      <Card className=\"mb-8 card-elevated rounded-2xl border-0 shadow-lg\">\n        <CardContent className=\"p-8\">\n          <h3 className=\"font-bold text-xl mb-3\">{quiz.title}</h3>\n          <p className=\"text-base text-muted-foreground mb-6 leading-relaxed\">\n            {quiz.description || \"Test your knowledge with this engaging quiz\"}\n          </p>\n          \n          <div className=\"grid grid-cols-2 gap-6 text-center\">\n            <div className=\"p-4 bg-gradient-to-br from-primary/10 to-primary/5 rounded-xl\">\n              <p className=\"text-2xl font-bold text-primary mb-1\">{questionCount}</p>\n              <p className=\"text-sm text-muted-foreground font-medium\">Questions</p>\n            </div>\n            <div className=\"p-4 bg-gradient-to-br from-accent/10 to-accent/5 rounded-xl\">\n              <p className=\"text-2xl font-bold text-accent mb-1\">30s</p>\n              <p className=\"text-sm text-muted-foreground font-medium\">Per Question</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Other Players */}\n      <Card className=\"card-elevated rounded-2xl border-0 shadow-lg\">\n        <CardContent className=\"p-8\">\n          <h4 className=\"font-bold text-lg mb-4\">{t(\"join.other_players\")}</h4>\n          {otherParticipants.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <div className=\"bg-gradient-to-br from-primary/10 to-accent/10 rounded-full p-4 w-16 h-16 mx-auto mb-4 flex items-center justify-center\">\n                <Users className=\"h-8 w-8 text-primary\" />\n              </div>\n              <p className=\"text-base text-muted-foreground leading-relaxed\">\n                You're the first player! Others will appear here when they join.\n              </p>\n            </div>\n          ) : (\n            <div className=\"flex flex-wrap gap-3\">\n              {otherParticipants.map((participant) => (\n                <div\n                  key={participant.id}\n                  className=\"flex items-center space-x-3 bg-gradient-to-r from-secondary/30 to-secondary/50 px-4 py-3 rounded-2xl border border-border/50\"\n                >\n                  <div className=\"w-8 h-8 gradient-primary rounded-full flex items-center justify-center shadow-md\">\n                    <span className=\"text-sm font-bold text-primary-foreground\">\n                      {participant.nickname.charAt(0).toUpperCase()}\n                    </span>\n                  </div>\n                  <span className=\"text-base font-medium break-words text-wrap\">{participant.nickname}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\ninterface PlayingViewProps {\n  question: any;\n  currentQuestionIndex: number;\n  totalQuestions: number;\n  selectedAnswer: string;\n  onAnswerSelect: (answer: string) => void;\n  score: number;\n  streak: number;\n  timeRemaining: number;\n  showConfetti: boolean;\n  onConfettiComplete: () => void;\n}\n\nfunction PlayingView({\n  question,\n  currentQuestionIndex,\n  totalQuestions,\n  selectedAnswer,\n  onAnswerSelect,\n  score,\n  streak,\n  timeRemaining,\n  showConfetti,\n  onConfettiComplete\n}: PlayingViewProps) {\n  if (!question) {\n    return (\n      <div className=\"container mx-auto px-4 py-6 text-center max-w-md\">\n        <p className=\"text-muted-foreground\">Loading question...</p>\n      </div>\n    );\n  }\n\n  const getOptionColor = (index: number) => {\n    const colors = [\"bg-red-500\", \"bg-blue-500\", \"bg-yellow-500\", \"bg-green-500\"];\n    return colors[index] || \"bg-gray-500\";\n  };\n\n  const getOptionLetter = (index: number) => {\n    return String.fromCharCode(65 + index); // A, B, C, D\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 max-w-md\">\n      <Confetti active={showConfetti} onComplete={onConfettiComplete} />\n      \n      {/* Progress Header */}\n      <div className=\"mb-6 text-center\">\n        <div className=\"flex items-center justify-center space-x-2 mb-4\">\n          <div className=\"flex items-center space-x-1\">\n            <Flame className=\"h-4 w-4 text-warning\" />\n            <span className=\"text-sm font-bold\" data-testid=\"player-streak\">{streak}</span>\n            <span className=\"text-xs text-muted-foreground\">streak</span>\n          </div>\n          <div className=\"w-px h-4 bg-border\"></div>\n          <div className=\"text-sm\">\n            <span className=\"font-bold\" data-testid=\"current-question\">{currentQuestionIndex + 1}</span>\n            <span className=\"text-muted-foreground\">/</span>\n            <span data-testid=\"total-questions\">{totalQuestions}</span>\n          </div>\n          <div className=\"w-px h-4 bg-border\"></div>\n          <div className=\"text-sm\">\n            <span className=\"font-bold text-primary\" data-testid=\"player-score\">{score.toLocaleString()}</span>\n            <span className=\"text-xs text-muted-foreground\">pts</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Current Question */}\n      <Card className=\"mb-8 card-elevated rounded-2xl border-0 shadow-lg\">\n        <CardContent className=\"p-8\">\n          <h2 className=\"text-xl sm:text-2xl font-bold text-center mb-8 leading-relaxed break-words text-wrap\" data-testid=\"question-text\">\n            {question.question}\n          </h2>\n          \n          {/* Answer Options */}\n          <div className=\"space-y-4\">\n            {question.type === \"mcq\" && question.options ? (\n              question.options.map((option: string, index: number) => (\n                <Button\n                  key={index}\n                  onClick={() => onAnswerSelect(option)}\n                  disabled={!!selectedAnswer}\n                  className={`w-full p-5 text-left rounded-2xl border-2 transition-all duration-300 touch-target shadow-md hover:shadow-lg ${\n                    selectedAnswer === option\n                      ? \"border-primary bg-gradient-to-r from-primary/20 to-primary/10 shadow-lg\"\n                      : selectedAnswer\n                      ? \"border-border bg-muted opacity-50\"\n                      : \"border-border hover:border-primary/50 hover:bg-primary/5\"\n                  }`}\n                  variant=\"outline\"\n                  data-testid={`answer-option-${index}`}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div className={`w-10 h-10 ${getOptionColor(index)} rounded-xl flex items-center justify-center shadow-md`}>\n                      <span className=\"text-white font-bold text-lg\">{getOptionLetter(index)}</span>\n                    </div>\n                    <span className=\"font-semibold text-base sm:text-lg break-words text-wrap\">{option}</span>\n                  </div>\n                </Button>\n              ))\n            ) : question.type === \"true_false\" ? (\n              <>\n                <Button\n                  onClick={() => onAnswerSelect(\"true\")}\n                  disabled={!!selectedAnswer}\n                  className={`w-full p-5 text-left rounded-2xl border-2 transition-all duration-300 touch-target shadow-md hover:shadow-lg ${\n                    selectedAnswer === \"true\"\n                      ? \"border-primary bg-gradient-to-r from-primary/20 to-primary/10 shadow-lg\"\n                      : selectedAnswer\n                      ? \"border-border bg-muted opacity-50\"\n                      : \"border-border hover:border-primary/50 hover:bg-primary/5\"\n                  }`}\n                  variant=\"outline\"\n                  data-testid=\"answer-option-true\"\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-green-500 rounded-xl flex items-center justify-center shadow-md\">\n                      <Check className=\"h-6 w-6 text-white\" />\n                    </div>\n                    <span className=\"font-semibold text-base sm:text-lg break-words text-wrap\">True</span>\n                  </div>\n                </Button>\n                <Button\n                  onClick={() => onAnswerSelect(\"false\")}\n                  disabled={!!selectedAnswer}\n                  className={`w-full p-5 text-left rounded-2xl border-2 transition-all duration-300 touch-target shadow-md hover:shadow-lg ${\n                    selectedAnswer === \"false\"\n                      ? \"border-primary bg-gradient-to-r from-primary/20 to-primary/10 shadow-lg\"\n                      : selectedAnswer\n                      ? \"border-border bg-muted opacity-50\"\n                      : \"border-border hover:border-primary/50 hover:bg-primary/5\"\n                  }`}\n                  variant=\"outline\"\n                  data-testid=\"answer-option-false\"\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-red-500 rounded-xl flex items-center justify-center shadow-md\">\n                      <X className=\"h-6 w-6 text-white\" />\n                    </div>\n                    <span className=\"font-semibold text-base sm:text-lg break-words text-wrap\">False</span>\n                  </div>\n                </Button>\n              </>\n            ) : null}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Timer */}\n      <div className=\"text-center\">\n        <div className=\"inline-block\">\n          <div className=\"relative w-20 h-20 mb-2\">\n            <svg className=\"w-20 h-20 transform -rotate-90\">\n              <circle \n                cx=\"40\" \n                cy=\"40\" \n                r=\"36\" \n                stroke=\"hsl(var(--muted))\" \n                strokeWidth=\"4\" \n                fill=\"transparent\"\n              />\n              <circle \n                cx=\"40\" \n                cy=\"40\" \n                r=\"36\" \n                stroke=\"hsl(var(--primary))\" \n                strokeWidth=\"4\" \n                fill=\"transparent\"\n                strokeDasharray=\"226\" \n                strokeDashoffset={226 - (226 * timeRemaining / 30)}\n                className=\"transition-all duration-1000\"\n              />\n            </svg>\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <span className=\"text-xl font-bold\" data-testid=\"time-remaining\">\n                {timeRemaining}\n              </span>\n            </div>\n          </div>\n          <p className=\"text-xs text-muted-foreground\">seconds remaining</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\ninterface FinishedViewProps {\n  score: number;\n  streak: number;\n}\n\nfunction FinishedView({ score, streak }: FinishedViewProps) {\n  return (\n    <div className=\"container mx-auto px-4 py-6 max-w-md text-center\">\n      <div className=\"mb-10\">\n        <div className=\"bg-gradient-to-br from-warning/20 to-warning/10 rounded-full p-6 w-24 h-24 mx-auto mb-6 flex items-center justify-center\">\n          <Trophy className=\"h-14 w-14 text-warning\" />\n        </div>\n        <h2 className=\"text-3xl font-bold mb-3 tracking-tight\">Quiz Complete! 🎉</h2>\n        <p className=\"text-lg text-muted-foreground font-medium\">Thanks for playing!</p>\n      </div>\n\n      <Card className=\"mb-8 card-elevated rounded-2xl border-0 shadow-lg\">\n        <CardContent className=\"p-8\">\n          <h3 className=\"font-bold text-xl mb-6\">Your Results</h3>\n          <div className=\"grid grid-cols-2 gap-6 text-center\">\n            <div className=\"p-6 bg-gradient-to-br from-primary/10 to-primary/5 rounded-2xl\">\n              <p className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"final-score\">\n                {score.toLocaleString()}\n              </p>\n              <p className=\"text-base text-muted-foreground font-medium\">Final Score</p>\n            </div>\n            <div className=\"p-6 bg-gradient-to-br from-warning/10 to-warning/5 rounded-2xl\">\n              <p className=\"text-3xl font-bold text-warning mb-2\" data-testid=\"best-streak\">\n                {streak}\n              </p>\n              <p className=\"text-base text-muted-foreground font-medium\">Best Streak</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Button\n        onClick={() => window.location.href = \"/\"}\n        className=\"btn-primary-lg text-primary-foreground rounded-2xl shadow-xl\"\n        data-testid=\"button-play-again\"\n      >\n        <Star className=\"h-5 w-5 mr-3\" />\n        Play Another Quiz\n      </Button>\n    </div>\n  );\n}\n","size_bytes":24357},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/results.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { t } from \"@/lib/i18n\";\nimport { type Session, type Response } from \"@shared/schema\";\nimport { \n  BarChart3, \n  Download, \n  Users, \n  Target, \n  Clock, \n  Trophy, \n  TrendingUp,\n  ChevronRight,\n  FileText,\n  Activity\n} from \"lucide-react\";\n\n// Mock user for now\nconst mockUser = { id: \"user-1\", name: \"Host\" };\n\ninterface SessionAnalytics {\n  sessionInfo: {\n    id: string;\n    sessionCode: string;\n    status: string;\n    startedAt?: Date;\n    completedAt?: Date;\n  };\n  participantStats: {\n    totalParticipants: number;\n    averageScore: number;\n    topPerformers: Array<{\n      id: string;\n      nickname: string;\n      score: number;\n      streak: number;\n    }>;\n  };\n  questionStats: Array<{\n    questionIndex: number;\n    question: string;\n    totalResponses: number;\n    correctResponses: number;\n    accuracy: number;\n    averageTime: number;\n  }>;\n  responseData: Response[];\n}\n\nexport default function Results() {\n  const { toast } = useToast();\n  const [user] = useState(mockUser);\n  const [selectedSessionId, setSelectedSessionId] = useState<string>(\"\");\n\n  // Fetch user's sessions\n  const { data: sessionsData, isLoading: sessionsLoading } = useQuery({\n    queryKey: [\"/api/sessions/active\", user.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/sessions/active/${user.id}`);\n      if (!response.ok) throw new Error(\"Failed to fetch sessions\");\n      return response.json();\n    }\n  });\n\n  const sessions = sessionsData?.sessions || [];\n\n  // Fetch analytics for selected session\n  const { data: analyticsData, isLoading: analyticsLoading } = useQuery({\n    queryKey: [\"/api/session\", selectedSessionId, \"analytics\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/session/${selectedSessionId}/analytics`);\n      if (!response.ok) throw new Error(\"Failed to fetch analytics\");\n      return response.json();\n    },\n    enabled: !!selectedSessionId\n  });\n\n  const analytics: SessionAnalytics | null = analyticsData?.analytics || null;\n\n  // Auto-select first session\n  useEffect(() => {\n    if (sessions.length > 0 && !selectedSessionId) {\n      setSelectedSessionId(sessions[0].id);\n    }\n  }, [sessions, selectedSessionId]);\n\n  const handleExportCSV = async (sessionId: string, sessionCode: string) => {\n    try {\n      const response = await fetch(`/api/session/${sessionId}/export/csv`);\n      if (!response.ok) throw new Error(\"Export failed\");\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `quiz-session-${sessionCode}-responses.csv`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Export Successful\",\n        description: \"CSV file has been downloaded.\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export session data.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 max-w-6xl\">\n      <div className=\"mb-12\">\n        <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold mb-3 tracking-tight break-words text-wrap\">{t(\"results.title\")}</h1>\n        <p className=\"text-lg sm:text-xl text-muted-foreground font-medium break-words text-wrap\">{t(\"results.subtitle\")}</p>\n      </div>\n\n      {sessionsLoading ? (\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {[1, 2, 3].map((i) => (\n                    <div key={i} className=\"p-4 bg-secondary/30 rounded-lg\">\n                      <div className=\"h-4 bg-muted rounded skeleton w-1/3 mb-2\" />\n                      <div className=\"h-3 bg-muted rounded skeleton w-1/2\" />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          <div className=\"space-y-4\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"h-4 bg-muted rounded skeleton w-1/2 mb-4\" />\n                <div className=\"space-y-3\">\n                  {[1, 2, 3, 4].map((i) => (\n                    <div key={i} className=\"flex justify-between\">\n                      <div className=\"h-3 bg-muted rounded skeleton w-1/3\" />\n                      <div className=\"h-3 bg-muted rounded skeleton w-1/4\" />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      ) : sessions.length === 0 ? (\n        <div className=\"text-center py-16\">\n          <div className=\"bg-gradient-to-br from-primary/10 to-accent/10 rounded-full p-8 w-32 h-32 mx-auto mb-8 flex items-center justify-center\">\n            <BarChart3 className=\"h-16 w-16 text-primary\" />\n          </div>\n          <h3 className=\"text-2xl font-bold mb-3 tracking-tight\">No Sessions Yet</h3>\n          <p className=\"text-lg text-muted-foreground mb-8 max-w-md mx-auto\">\n            Create and host your first quiz session to see analytics here.\n          </p>\n          <Button \n            onClick={() => window.location.href = \"/host-live\"}\n            className=\"btn-primary-lg text-primary-foreground rounded-2xl shadow-xl\"\n          >\n            Host Your First Quiz\n          </Button>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 lg:gap-10 mb-12\">\n          {/* Recent Sessions */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"card-elevated rounded-2xl border-0 shadow-lg\">\n              <CardHeader className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between p-6 sm:p-8 pb-6 gap-4\">\n                <CardTitle className=\"text-xl sm:text-2xl font-bold break-words text-wrap\">Recent Sessions</CardTitle>\n                <Select value={selectedSessionId} onValueChange={setSelectedSessionId}>\n                  <SelectTrigger className=\"w-full sm:w-48 rounded-xl border-2 focus:border-primary\">\n                    <SelectValue placeholder=\"Select session\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {sessions.map((session: Session) => (\n                      <SelectItem key={session.id} value={session.id}>\n                        {session.sessionCode} - {session.status}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </CardHeader>\n              <CardContent className=\"p-8 pt-0\">\n                <div className=\"space-y-6\">\n                  {sessions.slice(0, 5).map((session: Session) => (\n                    <SessionCard\n                      key={session.id}\n                      session={session}\n                      onExport={() => handleExportCSV(session.id, session.sessionCode)}\n                      isSelected={session.id === selectedSessionId}\n                      onClick={() => setSelectedSessionId(session.id)}\n                    />\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"space-y-6\">\n            <Card className=\"card-elevated rounded-2xl border-0 shadow-lg\">\n              <CardHeader className=\"p-8 pb-6\">\n                <CardTitle className=\"flex items-center gap-3 text-xl font-bold\">\n                  <div className=\"bg-gradient-to-r from-primary to-accent p-2 rounded-xl\">\n                    <Activity className=\"h-5 w-5 text-primary-foreground\" />\n                  </div>\n                  Performance Overview\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-8 pt-0\">\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-primary/5 to-primary/10 rounded-xl\">\n                    <span className=\"text-base font-medium\">Total Sessions</span>\n                    <span className=\"text-xl font-bold text-primary\" data-testid=\"total-sessions\">\n                      {sessions.length}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-accent/5 to-accent/10 rounded-xl\">\n                    <span className=\"text-base font-medium\">Total Players</span>\n                    <span className=\"text-xl font-bold text-accent\" data-testid=\"total-players\">\n                      {sessions.reduce((sum: number, s: Session) => {\n                        const participants = Array.isArray(s.participants) ? s.participants : [];\n                        return sum + participants.length;\n                      }, 0)}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-success/5 to-success/10 rounded-xl\">\n                    <span className=\"text-base font-medium\">Completed Sessions</span>\n                    <span className=\"text-xl font-bold text-success\" data-testid=\"completion-rate\">\n                      {sessions.filter((s: Session) => s.status === \"completed\").length}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-warning/5 to-warning/10 rounded-xl\">\n                    <span className=\"text-base font-medium\">Active Sessions</span>\n                    <span className=\"text-xl font-bold text-warning\" data-testid=\"active-sessions\">\n                      {sessions.filter((s: Session) => s.status === \"active\" || s.status === \"waiting\").length}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {analytics?.participantStats && (\n              <Card className=\"card-elevated rounded-2xl border-0 shadow-lg\">\n                <CardHeader className=\"p-8 pb-6\">\n                  <CardTitle className=\"flex items-center gap-3 text-xl font-bold\">\n                    <div className=\"bg-gradient-to-r from-warning to-yellow-400 p-2 rounded-xl\">\n                      <Trophy className=\"h-5 w-5 text-warning-foreground\" />\n                    </div>\n                    Top Performers\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-8 pt-0\">\n                  {analytics.participantStats.topPerformers.length === 0 ? (\n                    <p className=\"text-muted-foreground text-lg text-center py-6\">No participants yet</p>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {analytics.participantStats.topPerformers.slice(0, 3).map((participant, index) => (\n                        <div key={participant.id} className=\"flex items-center space-x-4 p-4 bg-gradient-to-r from-background to-card/50 rounded-xl border border-border/50\">\n                          <div className=\"w-10 h-10 gradient-primary rounded-full flex items-center justify-center shadow-md\">\n                            <span className=\"text-sm font-bold text-primary-foreground\">\n                              {participant.nickname.charAt(0).toUpperCase()}\n                            </span>\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"font-semibold text-base\">{participant.nickname}</p>\n                            <p className=\"text-sm text-muted-foreground font-medium\">\n                              {participant.score.toLocaleString()} pts\n                            </p>\n                          </div>\n                          {index === 0 && <Trophy className=\"h-5 w-5 text-warning\" />}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Detailed Analytics */}\n      {analytics && (\n        <Card className=\"card-elevated rounded-2xl border-0 shadow-lg\">\n          <CardHeader className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between p-6 sm:p-8 pb-6 gap-4\">\n            <CardTitle className=\"text-xl sm:text-2xl font-bold break-words text-wrap\">Question Performance</CardTitle>\n            <Button\n              onClick={() => handleExportCSV(analytics.sessionInfo.id, analytics.sessionInfo.sessionCode)}\n              className=\"btn-secondary rounded-xl shadow-md hover:shadow-lg transition-all duration-300\"\n              data-testid=\"button-export-csv\"\n            >\n              <Download className=\"h-5 w-5 mr-2\" />\n              Export CSV\n            </Button>\n          </CardHeader>\n          <CardContent className=\"p-8 pt-0\">\n            {analyticsLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3].map((i) => (\n                  <div key={i} className=\"border border-border rounded-lg p-4\">\n                    <div className=\"h-4 bg-muted rounded skeleton w-3/4 mb-3\" />\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                      {[1, 2, 3, 4].map((j) => (\n                        <div key={j} className=\"bg-secondary/20 p-2 rounded\">\n                          <div className=\"h-3 bg-muted rounded skeleton w-1/2 mb-1\" />\n                          <div className=\"h-2 bg-muted rounded skeleton w-1/3\" />\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : analytics.questionStats.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"bg-gradient-to-br from-primary/10 to-accent/10 rounded-full p-6 w-20 h-20 mx-auto mb-6 flex items-center justify-center\">\n                  <FileText className=\"h-10 w-10 text-primary\" />\n                </div>\n                <p className=\"text-muted-foreground text-lg\">No question data available for this session.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {analytics.questionStats.map((questionStat, index) => (\n                  <QuestionAnalytics key={index} questionStat={questionStat} />\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\ninterface SessionCardProps {\n  session: Session;\n  onExport: () => void;\n  isSelected: boolean;\n  onClick: () => void;\n}\n\nfunction SessionCard({ session, onExport, isSelected, onClick }: SessionCardProps) {\n  const participants = Array.isArray(session.participants) ? session.participants : [];\n  const averageScore = participants.length > 0 \n    ? Math.round(participants.reduce((sum, p) => sum + p.score, 0) / participants.length)\n    : 0;\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"bg-success/20 text-success\";\n      case \"active\": return \"bg-primary/20 text-primary\";\n      case \"paused\": return \"bg-warning/20 text-warning\";\n      case \"waiting\": return \"bg-secondary text-secondary-foreground\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const formatDate = (date: Date | string | null | undefined) => {\n    if (!date) return \"Not started\";\n    const d = typeof date === \"string\" ? new Date(date) : date;\n    if (isNaN(d.getTime())) return \"Invalid date\";\n    return d.toLocaleString();\n  };\n\n  return (\n    <div\n      onClick={onClick}\n      className={`flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 sm:p-6 rounded-2xl cursor-pointer transition-all duration-300 shadow-md hover:shadow-lg gap-4 ${\n        isSelected \n          ? \"bg-gradient-to-r from-primary/10 to-primary/5 border-2 border-primary\" \n          : \"bg-gradient-to-r from-background to-card/50 hover:bg-card/80 border-2 border-border/50 hover:border-primary/30\"\n      }`}\n    >\n      <div className=\"min-w-0 flex-1\">\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-3 mb-2\">\n          <h4 className=\"font-bold text-lg break-words text-wrap\" data-testid={`session-code-${session.id}`}>\n            Code: {session.sessionCode}\n          </h4>\n          <Badge className={`${getStatusColor(session.status)} px-3 py-1 rounded-xl font-semibold`}>\n            {session.status}\n          </Badge>\n        </div>\n        <p className=\"text-sm sm:text-base text-muted-foreground font-medium break-words\">\n          <span data-testid={`session-date-${session.id}`}>\n            {formatDate(session.startedAt || session.createdAt)}\n          </span> • \n          <span className=\"ml-1\" data-testid={`session-participants-${session.id}`}>\n            {participants.length} players\n          </span> • \n          <span className=\"ml-1\" data-testid={`session-avg-score-${session.id}`}>\n            {averageScore}% avg score\n          </span>\n        </p>\n      </div>\n      <div className=\"flex items-center space-x-3 flex-shrink-0\">\n        {session.status === \"completed\" && (\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              onExport();\n            }}\n            variant=\"outline\"\n            className=\"rounded-xl border-2 hover:bg-accent/5 hover:border-primary/50 transition-all duration-300 touch-target p-3\"\n            data-testid={`button-export-${session.id}`}\n          >\n            <Download className=\"h-5 w-5\" />\n          </Button>\n        )}\n        <ChevronRight className=\"h-5 w-5 text-muted-foreground\" />\n      </div>\n    </div>\n  );\n}\n\ninterface QuestionAnalyticsProps {\n  questionStat: {\n    questionIndex: number;\n    question: string;\n    totalResponses: number;\n    correctResponses: number;\n    accuracy: number;\n    averageTime: number;\n  };\n}\n\nfunction QuestionAnalytics({ questionStat }: QuestionAnalyticsProps) {\n  const getDifficultyColor = (accuracy: number) => {\n    if (accuracy >= 80) return \"text-success\";\n    if (accuracy >= 60) return \"text-warning\";\n    return \"text-destructive\";\n  };\n\n  const getDifficultyLabel = (accuracy: number) => {\n    if (accuracy >= 80) return \"Easy\";\n    if (accuracy >= 60) return \"Medium\";\n    return \"Hard\";\n  };\n\n  return (\n    <div className=\"border-2 border-border/50 rounded-2xl p-6 bg-gradient-to-r from-background to-card/30 shadow-md hover:shadow-lg transition-all duration-300\">\n      <div className=\"flex flex-col sm:flex-row items-start justify-between mb-4 gap-4\">\n        <div className=\"flex-1 min-w-0\">\n          <h4 className=\"font-bold text-base sm:text-lg mb-2 leading-relaxed break-words text-wrap\" data-testid={`question-${questionStat.questionIndex}`}>\n            Q{questionStat.questionIndex + 1}: {questionStat.question}\n          </h4>\n          <div className=\"flex items-center gap-3 text-sm text-muted-foreground\">\n            <Badge variant=\"outline\" className={`${getDifficultyColor(questionStat.accuracy)} px-3 py-1 rounded-xl font-semibold border-2`}>\n              {getDifficultyLabel(questionStat.accuracy)}\n            </Badge>\n            <span className=\"font-medium\">Avg. time: {Math.round(questionStat.averageTime / 1000)}s</span>\n          </div>\n        </div>\n        <div className=\"text-left sm:text-right flex-shrink-0\">\n          <p className=\"text-xl sm:text-2xl font-bold text-primary mb-1\" data-testid={`accuracy-${questionStat.questionIndex}`}>\n            {Math.round(questionStat.accuracy)}%\n          </p>\n          <p className=\"text-sm text-muted-foreground font-medium\">accuracy</p>\n        </div>\n      </div>\n      \n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between text-sm sm:text-base text-muted-foreground gap-4\">\n        <div className=\"flex flex-wrap items-center gap-4 sm:gap-6\">\n          <div className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n            <span className=\"font-medium\">{questionStat.totalResponses} responses</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Target className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n            <span className=\"font-medium\">{questionStat.correctResponses} correct</span>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Clock className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n          <span className=\"font-medium\">{Math.round(questionStat.averageTime / 1000)}s avg</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21192},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-lg backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5759},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close \n        className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary touch-target min-h-[44px] min-w-[44px] flex items-center justify-center\"\n        data-testid=\"button-close-drawer\"\n        aria-label=\"Close navigation drawer\"\n      >\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4456},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet \n          open={openMobile} \n          onOpenChange={setOpenMobile}\n          {...props}\n        >\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n            onEscapeKeyDown={() => {\n              // Ensure ESC key closes the mobile drawer\n              setOpenMobile(false);\n            }}\n            onInteractOutside={() => {\n              // Close drawer when clicking outside\n              setOpenMobile(false);\n            }}\n            onCloseAutoFocus={(event) => {\n              // Return focus to the hamburger trigger button\n              // Try both the data-testid and data-sidebar selectors for robustness\n              const trigger = document.querySelector('[data-testid=\"button-sidebar-toggle\"]') as HTMLElement ||\n                              document.querySelector('[data-sidebar=\"trigger\"]') as HTMLElement;\n              if (trigger) {\n                event.preventDefault();\n                trigger.focus();\n              }\n            }}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Navigation menu for mobile devices</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-sidebar transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":24410},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap h-auto min-h-[2.5rem] items-center justify-center rounded-md bg-muted p-1 text-muted-foreground gap-1\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center text-wrap break-words rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm min-w-0 flex-shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1935},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}